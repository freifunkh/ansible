---

- name: "Add server to known_hosts"
  known_hosts:
    path: "/etc/ssh/ssh_known_hosts"
    name: "{{ item }}"
    key: "{{ item }} {{ restic_backup_server_ssh_fingerprint }}"
  loop: "{{ restic_backup_server_ips + [ restic_backup_server_hostname ] }}"

- name: "Check if passwords/{{ restic_backup_hostname_override | default(ansible_hostname) }} exists (DIFF REDACTED)"
  local_action: stat path=../passwords/{{ restic_backup_hostname_override | default(ansible_hostname) }}
  register: "passwordfile"
  diff: "{{ show_secret_diffs }}"

- name: "Generate random"
  set_fact:
    restic_tmp_secret: "{{ lookup('password', '/dev/null length=20') }}"

- name: "Generate and store password"
  local_action: shell cd ..; echo {{ restic_tmp_secret }} | ansible-vault encrypt - > passwords/{{ restic_backup_hostname_override | default(ansible_hostname) }}
  when: "not passwordfile.stat.exists"

- name: "Get password"
  local_action: shell cd ..; ansible-vault view passwords/{{ restic_backup_hostname_override | default(ansible_hostname) }} | base64
  changed_when: False
  register: "password"

- name: "Create group sftponly on backup host"
  group:
    name: "sftponly"
  delegate_to: "{{ restic_backup_server_ansible_host }}"
  run_once: true

- name: "Insert/Update 'Match Group sftponly' configuration block in /etc/ssh/sshd_config"
  register: "sftp"
  blockinfile:
    path: "/etc/ssh/sshd_config"
    block: |
      Match Group sftponly
        ChrootDirectory %h
        ForceCommand internal-sftp
        AllowTcpForwarding no
        X11Forwarding no
        PasswordAuthentication no
        PermitTunnel no
        AuthorizedKeysFile /etc/ssh/authorized_keys/%u .ssh/authorized_keys
  delegate_to: "{{ restic_backup_server_ansible_host }}"
  run_once: true

- name: "Restart sshd on backup server"
  systemd:
    name: "sshd"
    state: "restarted"
  delegate_to: "{{ restic_backup_server_ansible_host }}"
  when: "sftp is changed"

- name: "Create user on {{ restic_backup_server_ansible_host }}"
  user:
    name: "{{ restic_backup_hostname_override | default(ansible_hostname) }}"
    groups: ["sftponly"]
    force: "no"
  delegate_to: "{{ restic_backup_server_ansible_host }}"

- name: "Create ssh-key"
  user:
    name: "{{ ansible_user }}"
    generate_ssh_key: "yes"
    ssh_key_type: "rsa"
    ssh_key_bits: 4096
    force: "no"

- name: "Obtain ssh-key"
  command: "cat ~/.ssh/id_rsa.pub"
  changed_when: False
  register: "ssh_key"

- name: "Create ssh folder on backups for user"
  file:
    path: "/home/{{ restic_backup_hostname_override | default(ansible_hostname) }}/.ssh"
    state: "directory"
    owner: "{{ restic_backup_hostname_override | default(ansible_hostname) }}"
    group: "{{ restic_backup_hostname_override | default(ansible_hostname) }}"
    mode: "0755"
  delegate_to: "{{ restic_backup_server_ansible_host }}"

- name: "Add ssh-key"
  copy:
    content: "{{ ssh_key.stdout }}"
    dest: "/home/{{ restic_backup_hostname_override | default(ansible_hostname) }}/.ssh/authorized_keys"
    owner: "{{ restic_backup_hostname_override | default(ansible_hostname) }}"
    group: "{{ restic_backup_hostname_override | default(ansible_hostname) }}"
    mode: "0644"
  delegate_to: "{{ restic_backup_server_ansible_host }}"
  when: "not ansible_check_mode"

- name: "Check if restic data path exists"
  stat:
    path: "/home/{{ restic_backup_hostname_override | default(ansible_hostname) }}/restic"
  register: "restic_datapath"
  delegate_to: "{{ restic_backup_server_ansible_host }}"

- name: "Create folders and set permissions"
  file:
    path: "/home/{{ restic_backup_hostname_override | default(ansible_hostname) }}/restic"
    owner: "{{ restic_backup_hostname_override | default(ansible_hostname) }}"
    group: "{{ restic_backup_hostname_override | default(ansible_hostname) }}"
    mode: "0775"
    state: "directory"
  delegate_to: "{{ restic_backup_server_ansible_host }}"
  when: "not restic_datapath.stat.exists"

- name: "Assure root ownership on /home/{{ restic_backup_hostname_override | default(ansible_hostname) }} for chroot to work"
  file:
    path: "/home/{{ restic_backup_hostname_override | default(ansible_hostname) }}"
    state: "directory"
    owner: "root"
  delegate_to: "{{ restic_backup_server_ansible_host }}"

- name: "Check if restic is installed"
  stat:
    path: "/usr/local/bin/restic"
  register: "resticpath"

- name: "Ensure restic is installed"
  block:
  - get_url:
      url: "https://github.com/restic/restic/releases/download/v{{restic_version}}/restic_{{restic_version}}_linux_amd64.bz2"
      dest: "/usr/local/bin/restic.bz2"
  - shell: "bzip2 -d /usr/local/bin/restic.bz2 && chmod +x /usr/local/bin/restic"
  when: "not resticpath.stat.exists"

- name: "Install backups ssh host host"
  blockinfile:
    path: "/etc/ssh/ssh_config"
    block: |
      Host backups
          HostName {{ restic_backup_server_hostname }}
          User {{ restic_backup_hostname_override | default(ansible_hostname) }}
          Port {{ restic_backup_server_port }}

- name: "Install restic shell script"
  template:
    dest: "/etc/restic.sh"
    src: "backup.sh.j2"
    mode: "0755"
  when: "not ansible_check_mode"

- name: "Install restic config"
  template:
    dest: "/etc/restic-backup.conf"
    src: "restic-backup.conf.j2"
  when: "not ansible_check_mode"

- name: "Init restic repository"
  command: "/etc/restic.sh init"
  when: "not restic_datapath.stat.exists"

- name: "Install restic systemd units"
  template:
    dest: "/etc/systemd/system/{{ item }}"
    src: "{{ item }}"
  with_items:
    - "restic-backup.service"
    - "restic-backup.timer"
    - "restic-prune.service"
    - "restic-prune.timer"
  register: "systemdunits"

- name: "Enable systemd units"
  systemd:
    name: "{{ item }}"
    daemon_reload: "yes"
    enabled: "yes"
    state: "started"
  with_items:
    - "restic-backup.timer"
    - "restic-prune.timer"
  when: "systemdunits.changed"

- name: "Install fuse (for mounting)"
  apt:
    name: "fuse"
    state: "present"
