#!/usr/bin/perl

use strict;
use warnings;
use LWP::UserAgent;
use JSON;
use Net::IP;

## CONFIGURATION ##
###################

my $url         = "{{ dns_zonenodes_nodeurl }}";

## END OF CONFIGURATION ##
##########################

sub normalize_nodename {
    my $data = $_[0] || "";

    $data = lc( $data );        # lower-case
    $data =~ s/[^a-z0-9\-]/-/g; # only alphanumeric and dashes
    $data =~ s/[\-]+/-/g;       # no subsequent dashes
    $data =~ s/^[\-]//g;        # no leading dashes
    
    if ( length( $data ) > 50 ) { $data = substr $data, 0, 50; };
    
    return $data;
}

my $ua = LWP::UserAgent->new;
$ua->timeout(10);

my $mode = $ARGV[0];
my $domain = $ARGV[1];

if ($mode eq "forward")
{
print '$TTL 4h'."\n";
print '@           IN  SOA     {{ dns_authoritative_nameserver[0].nameserver }} {{ dns_authoritative_SOAmail }}. ('."\n";
print '                ' . time() . '    ; serial'."\n";
print '                4h      ; slave refresh interval'."\n";
print '                1h      ; slave retry interval'."\n";
print '                2w      ; slave copy expire time'."\n";
print '                1h      ; NXDOMAIN cache time'."\n";
print '                )'."\n";
print ''."\n";
print "n.ffh.zone. IN  AAAA fdca:ffee:8::1\n";
}
else
{
print '@   IN  SOA {{ dns_authoritative_nameserver[0].nameserver }} {{ dns_authoritative_SOAmail }}. ('."\n";
print '    ' . time() . '  ; serial'."\n";
print '    1h      ; slave refresh interval'."\n";
print '    15m     ; slave retry interval'."\n";
print '    1w      ; slave copy expire time'."\n";
print '    1h      ; NXDOMAIN cache time'."\n";
print '    )'."\n";
print ''."\n";
# print "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.0.0.0.e.e.f.f.a.c.d.f.ip6.arpa. IN PTR n.ffh.zone.\n";
{% for ns in dns_authoritative_nameserver %}
print '@   IN  NS  {{ns.nameserver}}'."\n";
{% endfor %}

}
my $response = $ua->get( $url );
if ($response->is_success) {

    my @output;
   
    my $json = $response->decoded_content();
    my $data = from_json( $json, { utf8  => 1 } );

    # Get hostname and IPv6 address from nodes.json
    # normalize hostname
    foreach my $node ( @{ $data->{nodes} } ) {
        my $ip;
        my $names;
        foreach my $node_ip ( @{ $node->{nodeinfo}->{network}->{addresses} } ) {
            next if $node_ip !~ m{{ dns_zonenodes_matchIP }};
            $ip = $node_ip; 
        }
        next unless $ip;
        my $hostname = normalize_nodename( $node->{nodeinfo}->{hostname} );
        
        if ($mode eq "forward")
        {
            if ($hostname ne "")
            {
                push( @output, "$hostname.$domain. IN AAAA $ip\n" );
            }
        }
        else
        {
            if ($hostname ne "")
            {
                my $ip = new Net::IP ($ip) or die (Net::IP::Error());
                my $ptr = $ip->reverse_ip();
                push( @output, $ptr . "upstream. IN PTR $hostname.$domain.\n" );
            }
        }
    }

    # Output a sorted list, so that git is not polluted with unnecessary changes
    foreach my $line ( sort( @output ) ) {
        print $line;
    }
}

1;
