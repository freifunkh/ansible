From 1d7d3c672b22ec33b17cf02ccf7a6268b6f68d17 Mon Sep 17 00:00:00 2001
From: Geno <geno+dev@fireorbit.de>
Date: Thu, 27 May 2021 18:50:27 +0200
Subject: [PATCH 1/8] Inital support of influxdb2 client

---
 config_example.toml                 |  26 ++++
 database/all/main.go                |   1 +
 database/influxdb2/database.go      | 100 ++++++++++++++
 database/influxdb2/database_test.go |  46 +++++++
 database/influxdb2/global.go        |  74 ++++++++++
 database/influxdb2/global_test.go   |  79 +++++++++++
 database/influxdb2/link.go          |  30 ++++
 database/influxdb2/node.go          | 203 ++++++++++++++++++++++++++++
 go.mod                              |   3 +-
 go.sum                              |  40 ++++--
 10 files changed, 592 insertions(+), 10 deletions(-)
 create mode 100644 database/influxdb2/database.go
 create mode 100644 database/influxdb2/database_test.go
 create mode 100644 database/influxdb2/global.go
 create mode 100644 database/influxdb2/global_test.go
 create mode 100644 database/influxdb2/link.go
 create mode 100644 database/influxdb2/node.go

diff --git a/config_example.toml b/config_example.toml
index d936eba0..399a2eb4 100644
--- a/config_example.toml
+++ b/config_example.toml
@@ -204,6 +204,32 @@ password = ""
 #system   = "productive"
 #site     = "ffhb"
 
+# Save collected data to InfluxDB2.
+# There are the following measurments:
+#   node: store node specific data i.e. clients memory, airtime
+#   link: store link tq between two interfaces of two different nodes with i.e. nodeid, address, hostname
+#   global: store global data, i.e. count of clients and nodes
+#   firmware: store the count of nodes tagged with firmware
+#   model: store the count of nodes tagged with hardware model
+#   autoupdater: store the count of autoupdate branch
+[[database.connection.influxdb2]]
+enable   = false
+address  = "http://localhost:8086"
+token = ""
+username = ""
+password = ""
+organization = ""
+bucket = ""
+
+# Tagging of the data (optional)
+[database.connection.influxdb2.tags]
+# Tags used by Yanic would override the tags from this config
+# nodeid, hostname, owner, model, firmware_base, firmware_release,frequency11g and frequency11a are tags which are already used
+#tagname1 = "tagvalue 1"
+# some useful e.g.:
+#system   = "productive"
+#site     = "ffhb"
+
 # Graphite settings
 [[database.connection.graphite]]
 enable   = false
diff --git a/database/all/main.go b/database/all/main.go
index c353c806..32f9f347 100644
--- a/database/all/main.go
+++ b/database/all/main.go
@@ -3,6 +3,7 @@ package all
 import (
 	_ "github.com/FreifunkBremen/yanic/database/graphite"
 	_ "github.com/FreifunkBremen/yanic/database/influxdb"
+	_ "github.com/FreifunkBremen/yanic/database/influxdb2"
 	_ "github.com/FreifunkBremen/yanic/database/logging"
 	_ "github.com/FreifunkBremen/yanic/database/respondd"
 )
diff --git a/database/influxdb2/database.go b/database/influxdb2/database.go
new file mode 100644
index 00000000..cf8c9393
--- /dev/null
+++ b/database/influxdb2/database.go
@@ -0,0 +1,100 @@
+package influxdb
+
+import (
+	"context"
+
+	influxdb "github.com/influxdata/influxdb-client-go/v2"
+	influxdbAPI "github.com/influxdata/influxdb-client-go/v2/api"
+
+	"github.com/FreifunkBremen/yanic/database"
+)
+
+const (
+	MeasurementLink               = "link"        // Measurement for per-link statistics
+	MeasurementNode               = "node"        // Measurement for per-node statistics
+	MeasurementDHCP               = "dhcp"        // Measurement for DHCP server statistics
+	MeasurementGlobal             = "global"      // Measurement for summarized global statistics
+	CounterMeasurementFirmware    = "firmware"    // Measurement for firmware statistics
+	CounterMeasurementModel       = "model"       // Measurement for model statistics
+	CounterMeasurementAutoupdater = "autoupdater" // Measurement for autoupdater
+	batchMaxSize                  = 1000
+)
+
+type Connection struct {
+	database.Connection
+	config   Config
+	client   influxdb.Client
+	writeAPI influxdbAPI.WriteAPI
+}
+
+type Config map[string]interface{}
+
+func (c Config) Address() string {
+	return c["address"].(string)
+}
+func (c Config) Token() (string, bool) {
+	if d, ok := c["token"]; ok {
+		return d.(string), true
+	}
+	return "", false
+}
+func (c Config) Username() string {
+	return c["username"].(string)
+}
+func (c Config) Password() string {
+	return c["password"].(string)
+}
+func (c Config) Organization() string {
+	if d, ok := c["organization"]; ok {
+		return d.(string)
+	}
+	return ""
+}
+func (c Config) Bucket() string {
+	if d, ok := c["bucket"]; ok {
+		return d.(string)
+	}
+	return ""
+}
+func (c Config) Tags() map[string]string {
+	if c["tags"] != nil {
+		return c["tags"].(map[string]string)
+	}
+	return nil
+}
+
+func init() {
+	database.RegisterAdapter("influxdb2", Connect)
+}
+func Connect(configuration map[string]interface{}) (database.Connection, error) {
+	var config Config
+	config = configuration
+
+	token, tokenOK := config.Token()
+	// Make client
+	client := influxdb.NewClientWithOptions(config.Address(), token, influxdb.DefaultOptions().SetBatchSize(batchMaxSize))
+	if !tokenOK {
+		ctx := context.Background()
+		// The first call must be signIn
+		err := client.UsersAPI().SignIn(ctx, config.Username(), config.Password())
+		if err != nil {
+			return nil, err
+		}
+	}
+
+	writeAPI := client.WriteAPI(config.Organization(), config.Bucket())
+
+	db := &Connection{
+		config:   config,
+		client:   client,
+		writeAPI: writeAPI,
+	}
+
+	return db, nil
+}
+
+// Close all connection and clean up
+func (conn *Connection) Close() {
+	conn.writeAPI.Flush()
+	conn.client.Close()
+}
diff --git a/database/influxdb2/database_test.go b/database/influxdb2/database_test.go
new file mode 100644
index 00000000..4dfc02b7
--- /dev/null
+++ b/database/influxdb2/database_test.go
@@ -0,0 +1,46 @@
+package influxdb
+
+import (
+	"net/http"
+	"net/http/httptest"
+	"testing"
+
+	"github.com/stretchr/testify/assert"
+)
+
+func TestConnect(t *testing.T) {
+	assert := assert.New(t)
+
+	conn, err := Connect(map[string]interface{}{
+		"address":              "",
+		"username":             "",
+		"password":             "",
+		"insecure_skip_verify": true,
+	})
+	assert.Nil(conn)
+	assert.Error(err)
+
+	conn, err = Connect(map[string]interface{}{
+		"address":  "http://localhost",
+		"database": "",
+		"username": "",
+		"password": "",
+	})
+	assert.Nil(conn)
+	assert.Error(err)
+
+	srv := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
+		w.WriteHeader(http.StatusNoContent)
+	}))
+	defer srv.Close()
+
+	conn, err = Connect(map[string]interface{}{
+		"address":  srv.URL,
+		"database": "",
+		"username": "",
+		"password": "",
+	})
+
+	assert.NotNil(conn)
+	assert.NoError(err)
+}
diff --git a/database/influxdb2/global.go b/database/influxdb2/global.go
new file mode 100644
index 00000000..0a7eb15d
--- /dev/null
+++ b/database/influxdb2/global.go
@@ -0,0 +1,74 @@
+package influxdb
+
+import (
+	"time"
+
+	"github.com/FreifunkBremen/yanic/runtime"
+
+	influxdb "github.com/influxdata/influxdb-client-go/v2"
+)
+
+// InsertGlobals implementation of database
+func (conn *Connection) InsertGlobals(stats *runtime.GlobalStats, time time.Time, site string, domain string) {
+	measurementGlobal := MeasurementGlobal
+	counterMeasurementModel := CounterMeasurementModel
+	counterMeasurementFirmware := CounterMeasurementFirmware
+	counterMeasurementAutoupdater := CounterMeasurementAutoupdater
+
+	if site != runtime.GLOBAL_SITE {
+		measurementGlobal += "_site"
+		counterMeasurementModel += "_site"
+		counterMeasurementFirmware += "_site"
+		counterMeasurementAutoupdater += "_site"
+	}
+	if domain != runtime.GLOBAL_DOMAIN {
+		measurementGlobal += "_domain"
+		counterMeasurementModel += "_domain"
+		counterMeasurementFirmware += "_domain"
+		counterMeasurementAutoupdater += "_domain"
+	}
+	p := influxdb.NewPoint(measurementGlobal,
+		conn.config.Tags(),
+		map[string]interface{}{
+			"nodes":          stats.Nodes,
+			"gateways":       stats.Gateways,
+			"clients.total":  stats.Clients,
+			"clients.wifi":   stats.ClientsWifi,
+			"clients.wifi24": stats.ClientsWifi24,
+			"clients.wifi5":  stats.ClientsWifi5,
+			"clients.owe":    stats.ClientsOwe,
+			"clients.owe24":  stats.ClientsOwe24,
+			"clients.owe5":   stats.ClientsOwe5,
+		},
+		time)
+
+	if site != runtime.GLOBAL_SITE {
+		p = p.AddTag("site", site)
+	}
+	if domain != runtime.GLOBAL_DOMAIN {
+		p = p.AddTag("domain", domain)
+	}
+	conn.writeAPI.WritePoint(p)
+
+	conn.addCounterMap(counterMeasurementModel, stats.Models, time, site, domain)
+	conn.addCounterMap(counterMeasurementFirmware, stats.Firmwares, time, site, domain)
+	conn.addCounterMap(counterMeasurementAutoupdater, stats.Autoupdater, time, site, domain)
+}
+
+// Saves the values of a CounterMap in the database.
+// The key are used as 'value' tag.
+// The value is used as 'counter' field.
+func (conn *Connection) addCounterMap(name string, m runtime.CounterMap, t time.Time, site string, domain string) {
+	for key, count := range m {
+		p := influxdb.NewPoint("stat",
+			conn.config.Tags(),
+			map[string]interface{}{
+				"count": count,
+			},
+			t).
+			AddTag("site", site).
+			AddTag("domain", domain).
+			AddTag("value", key)
+		conn.writeAPI.WritePoint(p)
+	}
+}
diff --git a/database/influxdb2/global_test.go b/database/influxdb2/global_test.go
new file mode 100644
index 00000000..e32af893
--- /dev/null
+++ b/database/influxdb2/global_test.go
@@ -0,0 +1,79 @@
+package influxdb
+
+import (
+	"github.com/FreifunkBremen/yanic/data"
+	"github.com/FreifunkBremen/yanic/runtime"
+)
+
+const (
+	TEST_SITE   = "ffhb"
+	TEST_DOMAIN = "city"
+)
+
+func createTestNodes() *runtime.Nodes {
+	nodes := runtime.NewNodes(&runtime.NodesConfig{})
+
+	nodeData := &runtime.Node{
+		Online: true,
+		Statistics: &data.Statistics{
+			Clients: data.Clients{
+				Total: 23,
+			},
+		},
+		Nodeinfo: &data.Nodeinfo{
+			NodeID: "abcdef012345",
+			Hardware: data.Hardware{
+				Model: "TP-Link 841",
+			},
+			System: data.System{
+				SiteCode: TEST_SITE,
+			},
+		},
+	}
+	nodeData.Nodeinfo.Software.Firmware = &struct {
+		Base    string `json:"base,omitempty"`
+		Release string `json:"release,omitempty"`
+	}{
+		Release: "2016.1.6+entenhausen1",
+	}
+	nodeData.Nodeinfo.Software.Autoupdater = &struct {
+		Enabled bool   `json:"enabled,omitempty"`
+		Branch  string `json:"branch,omitempty"`
+	}{
+		Enabled: true,
+		Branch:  "stable",
+	}
+	nodes.AddNode(nodeData)
+
+	nodes.AddNode(&runtime.Node{
+		Online: true,
+		Statistics: &data.Statistics{
+			Clients: data.Clients{
+				Total: 2,
+			},
+		},
+		Nodeinfo: &data.Nodeinfo{
+			NodeID: "112233445566",
+			Hardware: data.Hardware{
+				Model: "TP-Link 841",
+			},
+		},
+	})
+
+	nodes.AddNode(&runtime.Node{
+		Online: true,
+		Nodeinfo: &data.Nodeinfo{
+			NodeID: "0xdeadbeef0x",
+			VPN:    true,
+			Hardware: data.Hardware{
+				Model: "Xeon Multi-Core",
+			},
+			System: data.System{
+				SiteCode:   TEST_SITE,
+				DomainCode: TEST_DOMAIN,
+			},
+		},
+	})
+
+	return nodes
+}
diff --git a/database/influxdb2/link.go b/database/influxdb2/link.go
new file mode 100644
index 00000000..e74def9d
--- /dev/null
+++ b/database/influxdb2/link.go
@@ -0,0 +1,30 @@
+package influxdb
+
+import (
+	"time"
+
+	"github.com/FreifunkBremen/yanic/runtime"
+
+	influxdb "github.com/influxdata/influxdb-client-go/v2"
+)
+
+// InsertLink adds a link data point
+func (conn *Connection) InsertLink(link *runtime.Link, t time.Time) {
+	p := influxdb.NewPoint(MeasurementLink,
+		conn.config.Tags(),
+		map[string]interface{}{
+			"tq": link.TQ * 100,
+		},
+		t).
+		AddTag("source.id", link.SourceID).
+		AddTag("source.addr", link.SourceAddress).
+		AddTag("target.id", link.TargetID).
+		AddTag("target.addr", link.TargetAddress)
+	if link.SourceHostname != "" {
+		p.AddTag("source.hostname", link.SourceHostname)
+	}
+	if link.TargetHostname != "" {
+		p.AddTag("target.hostname", link.TargetHostname)
+	}
+	conn.writeAPI.WritePoint(p)
+}
diff --git a/database/influxdb2/node.go b/database/influxdb2/node.go
new file mode 100644
index 00000000..fb2f0d9e
--- /dev/null
+++ b/database/influxdb2/node.go
@@ -0,0 +1,203 @@
+package influxdb
+
+import (
+	"strconv"
+	"time"
+
+	"github.com/FreifunkBremen/yanic/runtime"
+
+	influxdb "github.com/influxdata/influxdb-client-go/v2"
+)
+
+// PruneNodes prunes historical per-node data
+func (conn *Connection) PruneNodes(deleteAfter time.Duration) {
+	/* -
+	for _, measurement := range []string{MeasurementNode, MeasurementLink} {
+		query := fmt.Sprintf("delete from %s where time < now() - %ds", measurement, deleteAfter/time.Second)
+		conn.client.Query(client.NewQuery(query, conn.config.Database(), "m"))
+	}
+	*/
+}
+
+// InsertNode stores statistics and neighbours in the database
+func (conn *Connection) InsertNode(node *runtime.Node) {
+	stats := node.Statistics
+	time := node.Lastseen.GetTime()
+
+	if stats == nil || stats.NodeID == "" {
+		return
+	}
+
+	p := influxdb.NewPoint(MeasurementNode,
+		conn.config.Tags(),
+		map[string]interface{}{
+			"load":             stats.LoadAverage,
+			"time.up":          int64(stats.Uptime),
+			"time.idle":        int64(stats.Idletime),
+			"proc.running":     stats.Processes.Running,
+			"clients.wifi":     stats.Clients.Wifi,
+			"clients.wifi24":   stats.Clients.Wifi24,
+			"clients.wifi5":    stats.Clients.Wifi5,
+			"clients.owe":      stats.Clients.Owe,
+			"clients.owe24":    stats.Clients.Owe24,
+			"clients.owe5":     stats.Clients.Owe5,
+			"clients.total":    stats.Clients.Total,
+			"memory.buffers":   stats.Memory.Buffers,
+			"memory.cached":    stats.Memory.Cached,
+			"memory.free":      stats.Memory.Free,
+			"memory.total":     stats.Memory.Total,
+			"memory.available": stats.Memory.Available,
+		},
+		time).
+		AddTag("nodeid", stats.NodeID)
+
+	vpnInterfaces := make(map[string]bool)
+
+	if nodeinfo := node.Nodeinfo; nodeinfo != nil {
+		for _, mIface := range nodeinfo.Network.Mesh {
+			for _, tunnel := range mIface.Interfaces.Tunnel {
+				vpnInterfaces[tunnel] = true
+			}
+		}
+
+		p.AddTag("hostname", nodeinfo.Hostname)
+		if nodeinfo.System.SiteCode != "" {
+			p.AddTag("site", nodeinfo.System.SiteCode)
+		}
+		if nodeinfo.System.DomainCode != "" {
+			p.AddTag("domain", nodeinfo.System.DomainCode)
+		}
+		if owner := nodeinfo.Owner; owner != nil {
+			p.AddTag("owner", owner.Contact)
+		}
+		if wireless := nodeinfo.Wireless; wireless != nil {
+			p.AddField("wireless.txpower24", wireless.TxPower24)
+			p.AddField("wireless.txpower5", wireless.TxPower5)
+		}
+		// Hardware
+		p.AddTag("model", nodeinfo.Hardware.Model)
+		p.AddField("nproc", nodeinfo.Hardware.Nproc)
+		if nodeinfo.Software.Firmware != nil {
+			p.AddTag("firmware_base", nodeinfo.Software.Firmware.Base)
+			p.AddTag("firmware_release", nodeinfo.Software.Firmware.Release)
+		}
+		if nodeinfo.Software.Autoupdater != nil && nodeinfo.Software.Autoupdater.Enabled {
+			p.AddTag("autoupdater", nodeinfo.Software.Autoupdater.Branch)
+		} else {
+			p.AddTag("autoupdater", runtime.DISABLED_AUTOUPDATER)
+		}
+
+	}
+	if neighbours := node.Neighbours; neighbours != nil {
+		// VPN Neighbours are Neighbours but includet in one protocol
+		vpn := 0
+
+		// protocol: Batman Advance
+		batadv := 0
+		for mac, batadvNeighbours := range neighbours.Batadv {
+			batadv += len(batadvNeighbours.Neighbours)
+			if _, ok := vpnInterfaces[mac]; ok {
+				vpn += len(batadvNeighbours.Neighbours)
+			}
+		}
+		p.AddField("neighbours.batadv", batadv)
+
+		// protocol: Babel
+		babel := 0
+		for _, babelNeighbours := range neighbours.Babel {
+			babel += len(babelNeighbours.Neighbours)
+			if _, ok := vpnInterfaces[babelNeighbours.LinkLocalAddress]; ok {
+				vpn += len(babelNeighbours.Neighbours)
+			}
+		}
+		p.AddField("neighbours.babel", babel)
+
+		// protocol: LLDP
+		lldp := 0
+		for _, lldpNeighbours := range neighbours.LLDP {
+			lldp += len(lldpNeighbours)
+		}
+		p.AddField("neighbours.lldp", lldp)
+
+		// vpn  wait for babel
+		p.AddField("neighbours.vpn", vpn)
+
+		// total is the sum of all protocols
+		p.AddField("neighbours.total", batadv+babel+lldp)
+	}
+	if procstat := stats.ProcStats; procstat != nil {
+		p.AddField("stat.cpu.user", procstat.CPU.User)
+		p.AddField("stat.cpu.nice", procstat.CPU.Nice)
+		p.AddField("stat.cpu.system", procstat.CPU.System)
+		p.AddField("stat.cpu.idle", procstat.CPU.Idle)
+		p.AddField("stat.cpu.iowait", procstat.CPU.IOWait)
+		p.AddField("stat.cpu.irq", procstat.CPU.IRQ)
+		p.AddField("stat.cpu.softirq", procstat.CPU.SoftIRQ)
+		p.AddField("stat.intr", procstat.Intr)
+		p.AddField("stat.ctxt", procstat.ContextSwitches)
+		p.AddField("stat.softirq", procstat.SoftIRQ)
+		p.AddField("stat.processes", procstat.Processes)
+	}
+
+	if t := stats.Traffic.Rx; t != nil {
+		p.AddField("traffic.rx.bytes", int64(t.Bytes))
+		p.AddField("traffic.rx.packets", t.Packets)
+	}
+	if t := stats.Traffic.Tx; t != nil {
+		p.AddField("traffic.tx.bytes", int64(t.Bytes))
+		p.AddField("traffic.tx.packets", t.Packets)
+		p.AddField("traffic.tx.dropped", t.Dropped)
+	}
+	if t := stats.Traffic.Forward; t != nil {
+		p.AddField("traffic.forward.bytes", int64(t.Bytes))
+		p.AddField("traffic.forward.packets", t.Packets)
+	}
+	if t := stats.Traffic.MgmtRx; t != nil {
+		p.AddField("traffic.mgmt_rx.bytes", int64(t.Bytes))
+		p.AddField("traffic.mgmt_rx.packets", t.Packets)
+	}
+	if t := stats.Traffic.MgmtTx; t != nil {
+		p.AddField("traffic.mgmt_tx.bytes", int64(t.Bytes))
+		p.AddField("traffic.mgmt_tx.packets", t.Packets)
+	}
+
+	for _, airtime := range stats.Wireless {
+		suffix := airtime.FrequencyName()
+		p.AddField("airtime"+suffix+".chan_util", airtime.ChanUtil)
+		p.AddField("airtime"+suffix+".rx_util", airtime.RxUtil)
+		p.AddField("airtime"+suffix+".tx_util", airtime.TxUtil)
+		p.AddField("airtime"+suffix+".noise", airtime.Noise)
+		p.AddField("airtime"+suffix+".frequency", airtime.Frequency)
+		p.AddTag("frequency"+suffix, strconv.Itoa(int(airtime.Frequency)))
+	}
+
+	conn.writeAPI.WritePoint(p)
+
+	// Add DHCP statistics
+	if dhcp := stats.DHCP; dhcp != nil {
+		p := influxdb.NewPoint(MeasurementDHCP,
+			conn.config.Tags(),
+			map[string]interface{}{
+				"decline":  dhcp.Decline,
+				"offer":    dhcp.Offer,
+				"ack":      dhcp.Ack,
+				"nak":      dhcp.Nak,
+				"request":  dhcp.Request,
+				"discover": dhcp.Discover,
+				"inform":   dhcp.Inform,
+				"release":  dhcp.Release,
+
+				"leases.allocated": dhcp.LeasesAllocated,
+				"leases.pruned":    dhcp.LeasesPruned,
+			}, time).
+			AddTag("nodeid", stats.NodeID)
+
+		if nodeinfo := node.Nodeinfo; nodeinfo != nil {
+			p.AddTag("hostname", nodeinfo.Hostname)
+		}
+
+		conn.writeAPI.WritePoint(p)
+	}
+
+	return
+}
diff --git a/go.mod b/go.mod
index 0c09c20f..691b644b 100644
--- a/go.mod
+++ b/go.mod
@@ -7,6 +7,8 @@ require (
 	github.com/bdlm/log v0.1.20
 	github.com/bdlm/std v1.0.1
 	github.com/fgrosse/graphigo v0.0.0-20151220153422-55a0a92a7030
+	github.com/go-chi/chi v4.0.2+incompatible // indirect
+	github.com/influxdata/influxdb-client-go/v2 v2.3.0 // indirect
 	github.com/influxdata/influxdb1-client v0.0.0-20200515024757-02f0bf5dbca3
 	github.com/kylelemons/godebug v1.1.0 // indirect
 	github.com/naoina/go-stringutil v0.1.0 // indirect
@@ -22,5 +24,4 @@ require (
 	golang.org/x/sys v0.0.0-20210119212857-b64e53b001e4 // indirect
 	golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 // indirect
 	gopkg.in/fgrosse/graphigo.v2 v2.0.0-20151220153422-55a0a92a7030 // indirect
-	gopkg.in/yaml.v2 v2.2.8 // indirect
 )
diff --git a/go.sum b/go.sum
index cd1d2c9b..484dc201 100644
--- a/go.sum
+++ b/go.sum
@@ -69,6 +69,8 @@ github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
 github.com/kylelemons/godebug v1.1.0 h1:RPNrshWIDI6G2gRW9EHilWtl7Z6Sb1BR0xunSBf0SNc=
 github.com/kylelemons/godebug v1.1.0/go.mod h1:9/0rRGxNHcop5bhtWyNeEfOS8JIWk580+fNqagV/RAw=
 github.com/magiconair/properties v1.8.0/go.mod h1:PppfXfuXeibc/6YijjN8zIbojt8czPbwD3XqdrwzmxQ=
+github.com/mattn/goveralls v0.0.8 h1:4xflElRkVgj/FcBVKTAkqSWhHFY2u2uv4c054kG2RY8=
+github.com/mattn/goveralls v0.0.8/go.mod h1:h8b4ow6FxSPMQHF6o2ve3qsclnffZjYTNEKmLesRwqw=
 github.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=
 github.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=
 github.com/mitchellh/mapstructure v1.1.2/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=
@@ -121,39 +123,51 @@ github.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXf
 github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=
 github.com/stretchr/testify v1.5.1 h1:nOGnQDM7FYENwehXlg/kFVnos3rEvtKTjRvOWSzb6H4=
 github.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=
-github.com/tidwall/gjson v1.6.5 h1:P/K9r+1pt9AK54uap7HcoIp6T3a7AoMg3v18tUis+Cg=
-github.com/tidwall/gjson v1.6.5/go.mod h1:zeFuBCIqD4sN/gmqBzZ4j7Jd6UcA2Fc56x7QFsv+8fI=
-github.com/tidwall/match v1.0.3 h1:FQUVvBImDutD8wJLN6c5eMzWtjgONK9MwIBCOrUJKeE=
-github.com/tidwall/match v1.0.3/go.mod h1:eRSPERbgtNPcGhD8UCthc6PmLEQXEWd3PRB5JTxsfmM=
-github.com/tidwall/pretty v1.0.2 h1:Z7S3cePv9Jwm1KwS0513MRaoUe3S01WPbLNV40pwWZU=
-github.com/tidwall/pretty v1.0.2/go.mod h1:XNkn88O1ChpSDQmQeStsy+sBenx6DDtFZJxhVysOjyk=
+github.com/tidwall/gjson v1.6.0 h1:9VEQWz6LLMUsUl6PueE49ir4Ka6CzLymOAZDxpFsTDc=
+github.com/tidwall/gjson v1.6.0/go.mod h1:P256ACg0Mn+j1RXIDXoss50DeIABTYK1PULOJHhxOls=
+github.com/tidwall/match v1.0.1 h1:PnKP62LPNxHKTwvHHZZzdOAOCtsJTjo6dZLCwpKm5xc=
+github.com/tidwall/match v1.0.1/go.mod h1:LujAq0jyVjBy028G1WhWfIzbpQfMO8bBZ6Tyb0+pL9E=
+github.com/tidwall/pretty v1.0.0 h1:HsD+QiTn7sK6flMKIvNmpqz1qrpP3Ps6jOKIKMooyg4=
+github.com/tidwall/pretty v1.0.0/go.mod h1:XNkn88O1ChpSDQmQeStsy+sBenx6DDtFZJxhVysOjyk=
 github.com/tmc/grpc-websocket-proxy v0.0.0-20190109142713-0ad062ec5ee5/go.mod h1:ncp9v5uamzpCO7NfCPTXjqaC+bZgJeR0sMTm6dMHP7U=
 github.com/ugorji/go v1.1.4/go.mod h1:uQMGLiO92mf5W77hV/PUCpI3pbzQx3CRekS0kk+RGrc=
 github.com/xiang90/probing v0.0.0-20190116061207-43a291ad63a2/go.mod h1:UETIi67q53MR2AWcXfiuqkDkRtnGDLqkBTpCHuJHxtU=
 github.com/xordataexchange/crypt v0.0.3-0.20170626215501-b2862e3d0a77/go.mod h1:aYKd//L2LvnjZzWKhF00oedf4jCCReLcmhLdhm1A27Q=
+github.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
+github.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
 go.etcd.io/bbolt v1.3.2/go.mod h1:IbVyRI1SCnLcuJnV2u8VeU0CEYM7e686BmAb1XKL+uU=
 go.uber.org/atomic v1.4.0/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=
 go.uber.org/multierr v1.1.0/go.mod h1:wR5kodmAFQ0UK8QlbwjlSNy0Z68gJhDJUG5sjR94q/0=
 go.uber.org/zap v1.10.0/go.mod h1:vwi/ZaCAaUcBkycHslxD9B2zi4UTXhF60s6SWpuDF0Q=
 golang.org/x/crypto v0.0.0-20180904163835-0709b304e793/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
+golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
+golang.org/x/crypto v0.0.0-20200429183012-4b2356b1ed79 h1:IaQbIIB2X/Mp/DKctl6ROxz1KyMlKp4uyvL6+kQ7C88=
+golang.org/x/crypto v0.0.0-20200429183012-4b2356b1ed79/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9 h1:psW17arqaxU48Z5kZ0CQnkZWQJsqcURM6tKiBApRjXI=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=
 golang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=
+golang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
+golang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
 golang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20181114220301-adae6a3d119a/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20181220203305-927f97764cc3/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
+golang.org/x/net v0.0.0-20190522155817-f3200d17e092 h1:4QSRKanuywn15aTZvI/mIDEgPQpswuFndXpOj3rKEco=
 golang.org/x/net v0.0.0-20190522155817-f3200d17e092/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=
-golang.org/x/net v0.0.0-20201021035429-f5854403a974 h1:IX6qOQeG5uLjB/hjjwjedwfjND0hgjPMMyO1RoIXQNI=
+golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
+golang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=
 golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
 golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+golang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
@@ -161,20 +175,28 @@ golang.org/x/sys v0.0.0-20181107165924-66b7b1311ac8/go.mod h1:STP8DvDyc/dI5b8T5h
 golang.org/x/sys v0.0.0-20181116152217-5ac8a444bdc5/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20191120155948-bd437916bb0e h1:N7DeIrjYszNmSW409R3frPPwglRwMkXSBzwVbkOjLLA=
 golang.org/x/sys v0.0.0-20191120155948-bd437916bb0e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210119212857-b64e53b001e4 h1:myAQVi0cGEoqQVR5POX+8RR2mrocKqNN1hmeMqhX27k=
 golang.org/x/sys v0.0.0-20210119212857-b64e53b001e4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/text v0.3.0 h1:g61tztE5qeGQ89tm6NTjjM9VPIm088od1l6aSorWRWg=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
-golang.org/x/text v0.3.3 h1:cokOdA+Jmi5PJGXLlLllQSgYigAEfHXJAERHVMaCc2k=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/time v0.0.0-20190308202827-9d24e82272b4/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
 golang.org/x/tools v0.0.0-20180221164845-07fd8470d635/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
+golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
+golang.org/x/tools v0.0.0-20200522201501-cb1345f3a375 h1:SjQ2+AKWgZLc1xej6WSzL+Dfs5Uyd5xcZH1mGC411IA=
+golang.org/x/tools v0.0.0-20200522201501-cb1345f3a375/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
+golang.org/x/tools v0.1.0 h1:po9/4sTYwZU9lPhi1tOrb4hCv3qrhiQ77LZfGa2OjwY=
+golang.org/x/tools v0.1.0/go.mod h1:xkSsbof2nBLbhDlRMhhhyNLN/zl3eTqcnHD5viDpcZ0=
+golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7 h1:9zdDQZ7Thm29KFXgAX/+yaf3eVbP7djjWp/dXAppNCc=
 golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
-golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=
+golang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
+golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 google.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=
 google.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=

From d3dfb3addf7c8d1aea36d7fefd15fcacc529e505 Mon Sep 17 00:00:00 2001
From: Geno <geno+dev@fireorbit.de>
Date: Wed, 2 Jun 2021 19:49:38 +0200
Subject: [PATCH 2/8] database.influxdb2: improve buckets and fix tags

---
 config_example.toml            | 15 +++++---
 database/influxdb2/database.go | 63 ++++++++++++++++++----------------
 database/influxdb2/global.go   |  4 +--
 database/influxdb2/link.go     |  2 +-
 database/influxdb2/node.go     | 12 ++-----
 5 files changed, 51 insertions(+), 45 deletions(-)

diff --git a/config_example.toml b/config_example.toml
index 399a2eb4..0d29cb99 100644
--- a/config_example.toml
+++ b/config_example.toml
@@ -216,10 +216,17 @@ password = ""
 enable   = false
 address  = "http://localhost:8086"
 token = ""
-username = ""
-password = ""
-organization = ""
-bucket = ""
+organization_id = ""
+bucket_default = ""
+
+[database.connection.influxdb2.buckets]
+#link = "yanic-temp"
+#node = "yanic-temp"
+#dhcp = "yanic-temp"
+global = "yanic"
+#firmware = "yanic-temp"
+#model = "yanic-temp"
+#autoupdater = "yanic-temp"
 
 # Tagging of the data (optional)
 [database.connection.influxdb2.tags]
diff --git a/database/influxdb2/database.go b/database/influxdb2/database.go
index cf8c9393..09b1c75f 100644
--- a/database/influxdb2/database.go
+++ b/database/influxdb2/database.go
@@ -1,12 +1,11 @@
 package influxdb
 
 import (
-	"context"
-
 	influxdb "github.com/influxdata/influxdb-client-go/v2"
 	influxdbAPI "github.com/influxdata/influxdb-client-go/v2/api"
 
 	"github.com/FreifunkBremen/yanic/database"
+	"github.com/bdlm/log"
 )
 
 const (
@@ -24,7 +23,7 @@ type Connection struct {
 	database.Connection
 	config   Config
 	client   influxdb.Client
-	writeAPI influxdbAPI.WriteAPI
+	writeAPI map[string]influxdbAPI.WriteAPI
 }
 
 type Config map[string]interface{}
@@ -32,33 +31,38 @@ type Config map[string]interface{}
 func (c Config) Address() string {
 	return c["address"].(string)
 }
-func (c Config) Token() (string, bool) {
+func (c Config) Token() string {
 	if d, ok := c["token"]; ok {
-		return d.(string), true
+		return d.(string)
 	}
-	return "", false
-}
-func (c Config) Username() string {
-	return c["username"].(string)
-}
-func (c Config) Password() string {
-	return c["password"].(string)
+	log.Panic("influxdb2 - no token given")
+	return ""
 }
 func (c Config) Organization() string {
-	if d, ok := c["organization"]; ok {
+	if d, ok := c["organization_id"]; ok {
 		return d.(string)
 	}
 	return ""
 }
-func (c Config) Bucket() string {
-	if d, ok := c["bucket"]; ok {
-		return d.(string)
+func (c Config) Bucket(measurement string) string {
+	if d, ok := c["buckets"]; ok {
+		dMap := d.(map[string]interface{})
+		if d, ok := dMap[measurement]; ok {
+			return d.(string)
+		}
+		if d, ok := c["bucket_default"]; ok {
+			return d.(string)
+		}
 	}
 	return ""
 }
 func (c Config) Tags() map[string]string {
 	if c["tags"] != nil {
-		return c["tags"].(map[string]string)
+		tags := make(map[string]string)
+		for k, v := range c["tags"].(map[string]interface{}) {
+			tags[k] = v.(string)
+		}
+		return tags
 	}
 	return nil
 }
@@ -70,19 +74,18 @@ func Connect(configuration map[string]interface{}) (database.Connection, error)
 	var config Config
 	config = configuration
 
-	token, tokenOK := config.Token()
 	// Make client
-	client := influxdb.NewClientWithOptions(config.Address(), token, influxdb.DefaultOptions().SetBatchSize(batchMaxSize))
-	if !tokenOK {
-		ctx := context.Background()
-		// The first call must be signIn
-		err := client.UsersAPI().SignIn(ctx, config.Username(), config.Password())
-		if err != nil {
-			return nil, err
-		}
-	}
+	client := influxdb.NewClientWithOptions(config.Address(), config.Token(), influxdb.DefaultOptions().SetBatchSize(batchMaxSize))
 
-	writeAPI := client.WriteAPI(config.Organization(), config.Bucket())
+	writeAPI := map[string]influxdbAPI.WriteAPI{
+		MeasurementLink:               client.WriteAPI(config.Organization(), config.Bucket(MeasurementLink)),
+		MeasurementNode:               client.WriteAPI(config.Organization(), config.Bucket(MeasurementNode)),
+		MeasurementDHCP:               client.WriteAPI(config.Organization(), config.Bucket(MeasurementDHCP)),
+		MeasurementGlobal:             client.WriteAPI(config.Organization(), config.Bucket(MeasurementGlobal)),
+		CounterMeasurementFirmware:    client.WriteAPI(config.Organization(), config.Bucket(CounterMeasurementFirmware)),
+		CounterMeasurementModel:       client.WriteAPI(config.Organization(), config.Bucket(CounterMeasurementModel)),
+		CounterMeasurementAutoupdater: client.WriteAPI(config.Organization(), config.Bucket(CounterMeasurementAutoupdater)),
+	}
 
 	db := &Connection{
 		config:   config,
@@ -95,6 +98,8 @@ func Connect(configuration map[string]interface{}) (database.Connection, error)
 
 // Close all connection and clean up
 func (conn *Connection) Close() {
-	conn.writeAPI.Flush()
+	for _, api := range conn.writeAPI {
+		api.Flush()
+	}
 	conn.client.Close()
 }
diff --git a/database/influxdb2/global.go b/database/influxdb2/global.go
index 0a7eb15d..c17db05f 100644
--- a/database/influxdb2/global.go
+++ b/database/influxdb2/global.go
@@ -48,7 +48,7 @@ func (conn *Connection) InsertGlobals(stats *runtime.GlobalStats, time time.Time
 	if domain != runtime.GLOBAL_DOMAIN {
 		p = p.AddTag("domain", domain)
 	}
-	conn.writeAPI.WritePoint(p)
+	conn.writeAPI[MeasurementGlobal].WritePoint(p)
 
 	conn.addCounterMap(counterMeasurementModel, stats.Models, time, site, domain)
 	conn.addCounterMap(counterMeasurementFirmware, stats.Firmwares, time, site, domain)
@@ -69,6 +69,6 @@ func (conn *Connection) addCounterMap(name string, m runtime.CounterMap, t time.
 			AddTag("site", site).
 			AddTag("domain", domain).
 			AddTag("value", key)
-		conn.writeAPI.WritePoint(p)
+		conn.writeAPI[name].WritePoint(p)
 	}
 }
diff --git a/database/influxdb2/link.go b/database/influxdb2/link.go
index e74def9d..4dd36d0a 100644
--- a/database/influxdb2/link.go
+++ b/database/influxdb2/link.go
@@ -26,5 +26,5 @@ func (conn *Connection) InsertLink(link *runtime.Link, t time.Time) {
 	if link.TargetHostname != "" {
 		p.AddTag("target.hostname", link.TargetHostname)
 	}
-	conn.writeAPI.WritePoint(p)
+	conn.writeAPI[MeasurementLink].WritePoint(p)
 }
diff --git a/database/influxdb2/node.go b/database/influxdb2/node.go
index fb2f0d9e..bf6cac8f 100644
--- a/database/influxdb2/node.go
+++ b/database/influxdb2/node.go
@@ -9,14 +9,8 @@ import (
 	influxdb "github.com/influxdata/influxdb-client-go/v2"
 )
 
-// PruneNodes prunes historical per-node data
+// PruneNodes prunes historical per-node data - not nessasary, juse configurate your influxdb2
 func (conn *Connection) PruneNodes(deleteAfter time.Duration) {
-	/* -
-	for _, measurement := range []string{MeasurementNode, MeasurementLink} {
-		query := fmt.Sprintf("delete from %s where time < now() - %ds", measurement, deleteAfter/time.Second)
-		conn.client.Query(client.NewQuery(query, conn.config.Database(), "m"))
-	}
-	*/
 }
 
 // InsertNode stores statistics and neighbours in the database
@@ -171,7 +165,7 @@ func (conn *Connection) InsertNode(node *runtime.Node) {
 		p.AddTag("frequency"+suffix, strconv.Itoa(int(airtime.Frequency)))
 	}
 
-	conn.writeAPI.WritePoint(p)
+	conn.writeAPI[MeasurementNode].WritePoint(p)
 
 	// Add DHCP statistics
 	if dhcp := stats.DHCP; dhcp != nil {
@@ -196,7 +190,7 @@ func (conn *Connection) InsertNode(node *runtime.Node) {
 			p.AddTag("hostname", nodeinfo.Hostname)
 		}
 
-		conn.writeAPI.WritePoint(p)
+		conn.writeAPI[MeasurementDHCP].WritePoint(p)
 	}
 
 	return

From af52c3f4d0ce639fc7e10ab6afe901bc57df8f0f Mon Sep 17 00:00:00 2001
From: Geno <geno+dev@fireorbit.de>
Date: Wed, 2 Jun 2021 19:58:38 +0200
Subject: [PATCH 3/8] database.influxdb2: log which bucket is used for which
 measurement

---
 database/influxdb2/database.go | 18 ++++++++++++++++--
 1 file changed, 16 insertions(+), 2 deletions(-)

diff --git a/database/influxdb2/database.go b/database/influxdb2/database.go
index 09b1c75f..0d71e51a 100644
--- a/database/influxdb2/database.go
+++ b/database/influxdb2/database.go
@@ -48,12 +48,26 @@ func (c Config) Bucket(measurement string) string {
 	if d, ok := c["buckets"]; ok {
 		dMap := d.(map[string]interface{})
 		if d, ok := dMap[measurement]; ok {
-			return d.(string)
+			bucket := d.(string)
+			log.WithFields(map[string]interface{}{
+				"measurement": measurement,
+				"bucket":      bucket,
+			}).Info("get bucket for writeapi")
+			return bucket
 		}
 		if d, ok := c["bucket_default"]; ok {
-			return d.(string)
+			bucket := d.(string)
+			log.WithFields(map[string]interface{}{
+				"measurement": measurement,
+				"bucket":      bucket,
+			}).Info("get bucket for writeapi")
+			return bucket
 		}
 	}
+	log.WithFields(map[string]interface{}{
+		"measurement": measurement,
+		"bucket":      "",
+	}).Info("get bucket for writeapi")
 	return ""
 }
 func (c Config) Tags() map[string]string {

From 2271a1dd2c4d713b3e69ec5f0371b39920cfc1fd Mon Sep 17 00:00:00 2001
From: Geno <geno+dev@fireorbit.de>
Date: Wed, 2 Jun 2021 20:03:59 +0200
Subject: [PATCH 4/8] database.influxdb2: log which bucket is used for which
 measurement

---
 database/influxdb2/database.go | 20 ++++++++------------
 1 file changed, 8 insertions(+), 12 deletions(-)

diff --git a/database/influxdb2/database.go b/database/influxdb2/database.go
index 0d71e51a..33773436 100644
--- a/database/influxdb2/database.go
+++ b/database/influxdb2/database.go
@@ -45,29 +45,25 @@ func (c Config) Organization() string {
 	return ""
 }
 func (c Config) Bucket(measurement string) string {
+	logger := log.WithFields(map[string]interface{}{
+		"organization_id": c.Organization(),
+		"address":         c.Address(),
+		"measurement":     measurement,
+	})
 	if d, ok := c["buckets"]; ok {
 		dMap := d.(map[string]interface{})
 		if d, ok := dMap[measurement]; ok {
 			bucket := d.(string)
-			log.WithFields(map[string]interface{}{
-				"measurement": measurement,
-				"bucket":      bucket,
-			}).Info("get bucket for writeapi")
+			logger.WithField("bucket", bucket).Info("get bucket for writeapi")
 			return bucket
 		}
 		if d, ok := c["bucket_default"]; ok {
 			bucket := d.(string)
-			log.WithFields(map[string]interface{}{
-				"measurement": measurement,
-				"bucket":      bucket,
-			}).Info("get bucket for writeapi")
+			logger.WithField("bucket", bucket).Info("get bucket for writeapi")
 			return bucket
 		}
 	}
-	log.WithFields(map[string]interface{}{
-		"measurement": measurement,
-		"bucket":      "",
-	}).Info("get bucket for writeapi")
+	logger.Panic("no bucket found for measurement")
 	return ""
 }
 func (c Config) Tags() map[string]string {

From 91bc51211e85feb406211dff5177cd8754e27c46 Mon Sep 17 00:00:00 2001
From: Geno <geno+dev@fireorbit.de>
Date: Wed, 2 Jun 2021 20:07:34 +0200
Subject: [PATCH 5/8] database.influxdb2: fix default measurement

---
 database/influxdb2/database.go | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/database/influxdb2/database.go b/database/influxdb2/database.go
index 33773436..384b971f 100644
--- a/database/influxdb2/database.go
+++ b/database/influxdb2/database.go
@@ -63,6 +63,11 @@ func (c Config) Bucket(measurement string) string {
 			return bucket
 		}
 	}
+	if d, ok := c["bucket_default"]; ok {
+		bucket := d.(string)
+		logger.WithField("bucket", bucket).Info("get bucket for writeapi")
+		return bucket
+	}
 	logger.Panic("no bucket found for measurement")
 	return ""
 }

From e9d3a293a4e9f2a6f23b7f0cc4027f00f3da6d57 Mon Sep 17 00:00:00 2001
From: Geno <geno+dev@fireorbit.de>
Date: Fri, 4 Jun 2021 19:18:38 +0200
Subject: [PATCH 6/8] countermap: panic on writeAPI

---
 database/influxdb2/global.go | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/database/influxdb2/global.go b/database/influxdb2/global.go
index c17db05f..b04a0d94 100644
--- a/database/influxdb2/global.go
+++ b/database/influxdb2/global.go
@@ -5,6 +5,7 @@ import (
 
 	"github.com/FreifunkBremen/yanic/runtime"
 
+	"github.com/bdlm/log"
 	influxdb "github.com/influxdata/influxdb-client-go/v2"
 )
 
@@ -59,6 +60,10 @@ func (conn *Connection) InsertGlobals(stats *runtime.GlobalStats, time time.Time
 // The key are used as 'value' tag.
 // The value is used as 'counter' field.
 func (conn *Connection) addCounterMap(name string, m runtime.CounterMap, t time.Time, site string, domain string) {
+	writeAPI, ok := conn.writeAPI[name]
+	if !ok {
+		log.WithField("name", name).Panic("no writeAPI found for countermap")
+	}
 	for key, count := range m {
 		p := influxdb.NewPoint("stat",
 			conn.config.Tags(),
@@ -69,6 +74,6 @@ func (conn *Connection) addCounterMap(name string, m runtime.CounterMap, t time.
 			AddTag("site", site).
 			AddTag("domain", domain).
 			AddTag("value", key)
-		conn.writeAPI[name].WritePoint(p)
+		writeAPI.WritePoint(p)
 	}
 }

From 4f3bba83392606f1afa49e41fbce97988b68e569 Mon Sep 17 00:00:00 2001
From: Geno <geno+dev@fireorbit.de>
Date: Fri, 4 Jun 2021 19:27:22 +0200
Subject: [PATCH 7/8] fix site/domain on influxdb2 buckets

---
 database/influxdb2/global.go | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/database/influxdb2/global.go b/database/influxdb2/global.go
index b04a0d94..83742a60 100644
--- a/database/influxdb2/global.go
+++ b/database/influxdb2/global.go
@@ -51,18 +51,18 @@ func (conn *Connection) InsertGlobals(stats *runtime.GlobalStats, time time.Time
 	}
 	conn.writeAPI[MeasurementGlobal].WritePoint(p)
 
-	conn.addCounterMap(counterMeasurementModel, stats.Models, time, site, domain)
-	conn.addCounterMap(counterMeasurementFirmware, stats.Firmwares, time, site, domain)
-	conn.addCounterMap(counterMeasurementAutoupdater, stats.Autoupdater, time, site, domain)
+	conn.addCounterMap(CounterMeasurementModel, counterMeasurementModel, stats.Models, time, site, domain)
+	conn.addCounterMap(CounterMeasurementFirmware, counterMeasurementFirmware, stats.Firmwares, time, site, domain)
+	conn.addCounterMap(CounterMeasurementAutoupdater, counterMeasurementAutoupdater, stats.Autoupdater, time, site, domain)
 }
 
 // Saves the values of a CounterMap in the database.
 // The key are used as 'value' tag.
 // The value is used as 'counter' field.
-func (conn *Connection) addCounterMap(name string, m runtime.CounterMap, t time.Time, site string, domain string) {
-	writeAPI, ok := conn.writeAPI[name]
+func (conn *Connection) addCounterMap(writeName, name string, m runtime.CounterMap, t time.Time, site string, domain string) {
+	writeAPI, ok := conn.writeAPI[writeName]
 	if !ok {
-		log.WithField("name", name).Panic("no writeAPI found for countermap")
+		log.WithField("writeName", writeName).Panic("no writeAPI found for countermap")
 	}
 	for key, count := range m {
 		p := influxdb.NewPoint("stat",

From 66f61418e65350f82c07ad39253cb87c37ac2be1 Mon Sep 17 00:00:00 2001
From: Geno <geno+dev@fireorbit.de>
Date: Thu, 9 Sep 2021 11:00:34 +0200
Subject: [PATCH 8/8] fix depends after rebase

---
 go.mod |  5 +--
 go.sum | 98 +++++++++++++++++++++++++++++++++++++---------------------
 2 files changed, 63 insertions(+), 40 deletions(-)

diff --git a/go.mod b/go.mod
index 691b644b..db359515 100644
--- a/go.mod
+++ b/go.mod
@@ -7,8 +7,7 @@ require (
 	github.com/bdlm/log v0.1.20
 	github.com/bdlm/std v1.0.1
 	github.com/fgrosse/graphigo v0.0.0-20151220153422-55a0a92a7030
-	github.com/go-chi/chi v4.0.2+incompatible // indirect
-	github.com/influxdata/influxdb-client-go/v2 v2.3.0 // indirect
+	github.com/influxdata/influxdb-client-go/v2 v2.3.0
 	github.com/influxdata/influxdb1-client v0.0.0-20200515024757-02f0bf5dbca3
 	github.com/kylelemons/godebug v1.1.0 // indirect
 	github.com/naoina/go-stringutil v0.1.0 // indirect
@@ -20,8 +19,6 @@ require (
 	github.com/spf13/cobra v1.0.0
 	github.com/stretchr/testify v1.5.1
 	github.com/tidwall/gjson v1.6.5
-	golang.org/x/net v0.0.0-20201021035429-f5854403a974 // indirect
-	golang.org/x/sys v0.0.0-20210119212857-b64e53b001e4 // indirect
 	golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 // indirect
 	gopkg.in/fgrosse/graphigo.v2 v2.0.0-20151220153422-55a0a92a7030 // indirect
 )
diff --git a/go.sum b/go.sum
index 484dc201..90039376 100644
--- a/go.sum
+++ b/go.sum
@@ -20,19 +20,26 @@ github.com/coreos/go-semver v0.2.0/go.mod h1:nnelYz7RCh+5ahJtPPxZlU+153eP4D4r3Ee
 github.com/coreos/go-systemd v0.0.0-20190321100706-95778dfbb74e/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=
 github.com/coreos/pkg v0.0.0-20180928190104-399ea9e2e55f/go.mod h1:E3G3o1h8I7cfcXa63jLwjI0eiQQMgzzUDFVpN/nH/eA=
 github.com/cpuguy83/go-md2man/v2 v2.0.0/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=
+github.com/cyberdelia/templates v0.0.0-20141128023046-ca7fffd4298c/go.mod h1:GyV+0YP4qX0UQ7r2MoYZ+AvYDp12OF5yg4q8rGnyNh4=
 github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
 github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
 github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
+github.com/deepmap/oapi-codegen v1.6.0 h1:w/d1ntwh91XI0b/8ja7+u5SvA4IFfM0UNNLmiDR1gg0=
+github.com/deepmap/oapi-codegen v1.6.0/go.mod h1:ryDa9AgbELGeB+YEXE1dR53yAjHwFvE9iAUlWl9Al3M=
 github.com/dgrijalva/jwt-go v3.2.0+incompatible/go.mod h1:E3ru+11k8xSBh+hMPgOLZmtrrCbhqsmaPHjLKYnJCaQ=
 github.com/dgryski/go-sip13 v0.0.0-20181026042036-e10d5fee7954/go.mod h1:vAd38F8PWV+bWy6jNmig1y/TA+kYO4g3RSRF0IAv0no=
 github.com/fgrosse/graphigo v0.0.0-20151220153422-55a0a92a7030 h1:MNF4j/ZaoP6wGkUTGN1I+NZmC43c8VPtjBFj9h2pvvs=
 github.com/fgrosse/graphigo v0.0.0-20151220153422-55a0a92a7030/go.mod h1:m3fD9iVpJUF8Kl2kz/HwASu4Hf1x3s3V+H0BiEj46XQ=
 github.com/fsnotify/fsnotify v1.4.7 h1:IXs+QLmnXW2CcXuY+8Mzv/fWEsPGWxqefPtCP5CnV9I=
 github.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=
+github.com/getkin/kin-openapi v0.53.0/go.mod h1:7Yn5whZr5kJi6t+kShccXS8ae1APpYTW6yheSwk8Yi4=
 github.com/ghodss/yaml v1.0.0/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=
+github.com/go-chi/chi/v5 v5.0.0/go.mod h1:BBug9lr0cqtdAhsu6R4AAdvufI0/XBzAQSsUqJpoZOs=
 github.com/go-kit/kit v0.8.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=
 github.com/go-logfmt/logfmt v0.3.0/go.mod h1:Qt1PoO58o5twSAckw1HlFXLmHsOX5/0LbT9GBnD5lWE=
 github.com/go-logfmt/logfmt v0.4.0/go.mod h1:3RMwSq7FuexP4Kalkev3ejPJsZTpXXBr9+V4qmtdjCk=
+github.com/go-openapi/jsonpointer v0.19.5/go.mod h1:Pl9vOtqEWErmShwVjC8pYs9cog34VGT37dQOVbmoatg=
+github.com/go-openapi/swag v0.19.5/go.mod h1:POnQmlKehdgb5mhVOsnJFsivZCEZ/vjK9gh66Z9tfKk=
 github.com/go-stack/stack v1.8.0/go.mod h1:v0f6uXyyMGvRgIKkXu+yp6POWl0qKG85gN/melR3HDY=
 github.com/gogo/protobuf v1.1.1/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=
 github.com/gogo/protobuf v1.2.1/go.mod h1:hp+jE20tsWTFYpLwKvXlhS1hjn+gTNwPg2I6zVXpSg4=
@@ -42,8 +49,10 @@ github.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfb
 github.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
 github.com/golang/protobuf v1.3.1 h1:YF8+flBXS5eO826T4nzqPrxfhQThhXl0YzfuUPu4SBg=
 github.com/golang/protobuf v1.3.1/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
+github.com/golangci/lint-1 v0.0.0-20181222135242-d2cdd8c08219/go.mod h1:/X8TswGSh1pIozq4ZwCfxS0WA5JGXguxk94ar/4c87Y=
 github.com/google/btree v1.0.0/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=
 github.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=
+github.com/gorilla/mux v1.8.0/go.mod h1:DVbg23sWSpFRCP0SfiEN6jmj59UnW/n46BH5rLB71So=
 github.com/gorilla/websocket v1.4.0/go.mod h1:E7qHFY5m1UJ88s3WnNqhKjPHQ0heANvMoAMk2YaljkQ=
 github.com/grpc-ecosystem/go-grpc-middleware v1.0.0/go.mod h1:FiyG127CGDf3tlThmgyCl78X/SZQqEOJBCDaAfeWzPs=
 github.com/grpc-ecosystem/go-grpc-prometheus v1.2.0/go.mod h1:8NvIoxWQoOIhqOTXgfV/d3M/q6VIi02HzZEHgUlZvzk=
@@ -53,8 +62,12 @@ github.com/hpcloud/tail v1.0.0 h1:nfCOvKYfkgYP8hkirhJocXT2+zOD8yUNjXaWfTlyFKI=
 github.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=
 github.com/inconshreveable/mousetrap v1.0.0 h1:Z8tu5sraLXCXIcARxBp/8cbvlwVa7Z1NHg9XEKhtSvM=
 github.com/inconshreveable/mousetrap v1.0.0/go.mod h1:PxqpIevigyE2G7u3NXJIT2ANytuPF1OarO4DADm73n8=
+github.com/influxdata/influxdb-client-go/v2 v2.3.0 h1:4YzLWRsPUoHuQYWDwPoybaJjN01e0/k0AIQO85ymCKI=
+github.com/influxdata/influxdb-client-go/v2 v2.3.0/go.mod h1:vLNHdxTJkIf2mSLvGrpj8TCcISApPoXkaxP8g9uRlW8=
 github.com/influxdata/influxdb1-client v0.0.0-20200515024757-02f0bf5dbca3 h1:k3/6a1Shi7GGCp9QpyYuXsMM6ncTOjCzOE9Fd6CDA+Q=
 github.com/influxdata/influxdb1-client v0.0.0-20200515024757-02f0bf5dbca3/go.mod h1:qj24IKcXYK6Iy9ceXlo3Tc+vtHo9lIhSX5JddghvEPo=
+github.com/influxdata/line-protocol v0.0.0-20200327222509-2487e7298839 h1:W9WBk7wlPfJLvMCdtV4zPulc4uCPrlywQOmbFOhgQNU=
+github.com/influxdata/line-protocol v0.0.0-20200327222509-2487e7298839/go.mod h1:xaLFMmpvUxqXtVkUJfg9QmT88cDaCJ3ZKgdZ78oO8Qo=
 github.com/jonboulle/clockwork v0.1.0/go.mod h1:Ii8DK3G1RaLaWxj9trq07+26W01tbo22gdxWY5EU2bo=
 github.com/julienschmidt/httprouter v1.2.0/go.mod h1:SYymIcj16QtmaHHD7aYtjjsJG7VTCxuUUipMqKk8s4w=
 github.com/kisielk/errcheck v1.1.0/go.mod h1:EZBBE59ingxPouuu3KfxchcWSUPOHkagtvWXihfKN4Q=
@@ -68,9 +81,18 @@ github.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=
 github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
 github.com/kylelemons/godebug v1.1.0 h1:RPNrshWIDI6G2gRW9EHilWtl7Z6Sb1BR0xunSBf0SNc=
 github.com/kylelemons/godebug v1.1.0/go.mod h1:9/0rRGxNHcop5bhtWyNeEfOS8JIWk580+fNqagV/RAw=
+github.com/labstack/echo/v4 v4.2.1/go.mod h1:AA49e0DZ8kk5jTOOCKNuPR6oTnBS0dYiM4FW1e6jwpg=
+github.com/labstack/gommon v0.3.0/go.mod h1:MULnywXg0yavhxWKc+lOruYdAhDwPK9wf0OL7NoOu+k=
 github.com/magiconair/properties v1.8.0/go.mod h1:PppfXfuXeibc/6YijjN8zIbojt8czPbwD3XqdrwzmxQ=
-github.com/mattn/goveralls v0.0.8 h1:4xflElRkVgj/FcBVKTAkqSWhHFY2u2uv4c054kG2RY8=
-github.com/mattn/goveralls v0.0.8/go.mod h1:h8b4ow6FxSPMQHF6o2ve3qsclnffZjYTNEKmLesRwqw=
+github.com/mailru/easyjson v0.0.0-20190614124828-94de47d64c63/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=
+github.com/mailru/easyjson v0.0.0-20190626092158-b2ccc519800e/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=
+github.com/matryer/moq v0.0.0-20190312154309-6cfb0558e1bd/go.mod h1:9ELz6aaclSIGnZBoaSLZ3NAl1VTufbOrXBPvtcy6WiQ=
+github.com/mattn/go-colorable v0.1.2/go.mod h1:U0ppj6V5qS13XJ6of8GYAs25YV2eR4EVcfRqFIhoBtE=
+github.com/mattn/go-colorable v0.1.7/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=
+github.com/mattn/go-colorable v0.1.8/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=
+github.com/mattn/go-isatty v0.0.8/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=
+github.com/mattn/go-isatty v0.0.9/go.mod h1:YNRxwqDuOph6SZLI9vUUz6OYw3QyUt7WiY2yME+cCiQ=
+github.com/mattn/go-isatty v0.0.12/go.mod h1:cbi8OIDigv2wuxKPP5vlRcQ1OAZbq2CE4Kysco4FUpU=
 github.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=
 github.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=
 github.com/mitchellh/mapstructure v1.1.2/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=
@@ -90,6 +112,7 @@ github.com/paulmach/go.geojson v1.4.0 h1:5x5moCkCtDo5x8af62P9IOAYGQcYHtxz2QJ3x1D
 github.com/paulmach/go.geojson v1.4.0/go.mod h1:YaKx1hKpWF+T2oj2lFJPsW/t1Q5e1jQI61eoQSTwpIs=
 github.com/pelletier/go-toml v1.2.0/go.mod h1:5z9KED0ma1S8pY6P1sdut58dfprrGBbd/94hg7ilaic=
 github.com/pkg/errors v0.8.0/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
+github.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
 github.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=
 github.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
 github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
@@ -121,82 +144,85 @@ github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+
 github.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
 github.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=
 github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=
+github.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=
 github.com/stretchr/testify v1.5.1 h1:nOGnQDM7FYENwehXlg/kFVnos3rEvtKTjRvOWSzb6H4=
 github.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=
-github.com/tidwall/gjson v1.6.0 h1:9VEQWz6LLMUsUl6PueE49ir4Ka6CzLymOAZDxpFsTDc=
-github.com/tidwall/gjson v1.6.0/go.mod h1:P256ACg0Mn+j1RXIDXoss50DeIABTYK1PULOJHhxOls=
-github.com/tidwall/match v1.0.1 h1:PnKP62LPNxHKTwvHHZZzdOAOCtsJTjo6dZLCwpKm5xc=
-github.com/tidwall/match v1.0.1/go.mod h1:LujAq0jyVjBy028G1WhWfIzbpQfMO8bBZ6Tyb0+pL9E=
-github.com/tidwall/pretty v1.0.0 h1:HsD+QiTn7sK6flMKIvNmpqz1qrpP3Ps6jOKIKMooyg4=
-github.com/tidwall/pretty v1.0.0/go.mod h1:XNkn88O1ChpSDQmQeStsy+sBenx6DDtFZJxhVysOjyk=
+github.com/tidwall/gjson v1.6.5 h1:P/K9r+1pt9AK54uap7HcoIp6T3a7AoMg3v18tUis+Cg=
+github.com/tidwall/gjson v1.6.5/go.mod h1:zeFuBCIqD4sN/gmqBzZ4j7Jd6UcA2Fc56x7QFsv+8fI=
+github.com/tidwall/match v1.0.3 h1:FQUVvBImDutD8wJLN6c5eMzWtjgONK9MwIBCOrUJKeE=
+github.com/tidwall/match v1.0.3/go.mod h1:eRSPERbgtNPcGhD8UCthc6PmLEQXEWd3PRB5JTxsfmM=
+github.com/tidwall/pretty v1.0.2 h1:Z7S3cePv9Jwm1KwS0513MRaoUe3S01WPbLNV40pwWZU=
+github.com/tidwall/pretty v1.0.2/go.mod h1:XNkn88O1ChpSDQmQeStsy+sBenx6DDtFZJxhVysOjyk=
 github.com/tmc/grpc-websocket-proxy v0.0.0-20190109142713-0ad062ec5ee5/go.mod h1:ncp9v5uamzpCO7NfCPTXjqaC+bZgJeR0sMTm6dMHP7U=
 github.com/ugorji/go v1.1.4/go.mod h1:uQMGLiO92mf5W77hV/PUCpI3pbzQx3CRekS0kk+RGrc=
+github.com/valyala/bytebufferpool v1.0.0/go.mod h1:6bBcMArwyJ5K/AmCkWv1jt77kVWyCJ6HpOuEn7z0Csc=
+github.com/valyala/fasttemplate v1.0.1/go.mod h1:UQGH1tvbgY+Nz5t2n7tXsz52dQxojPUpymEIMZ47gx8=
+github.com/valyala/fasttemplate v1.2.1/go.mod h1:KHLXt3tVN2HBp8eijSv/kGJopbvo7S+qRAEEKiv+SiQ=
 github.com/xiang90/probing v0.0.0-20190116061207-43a291ad63a2/go.mod h1:UETIi67q53MR2AWcXfiuqkDkRtnGDLqkBTpCHuJHxtU=
 github.com/xordataexchange/crypt v0.0.3-0.20170626215501-b2862e3d0a77/go.mod h1:aYKd//L2LvnjZzWKhF00oedf4jCCReLcmhLdhm1A27Q=
-github.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
-github.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
 go.etcd.io/bbolt v1.3.2/go.mod h1:IbVyRI1SCnLcuJnV2u8VeU0CEYM7e686BmAb1XKL+uU=
 go.uber.org/atomic v1.4.0/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=
 go.uber.org/multierr v1.1.0/go.mod h1:wR5kodmAFQ0UK8QlbwjlSNy0Z68gJhDJUG5sjR94q/0=
 go.uber.org/zap v1.10.0/go.mod h1:vwi/ZaCAaUcBkycHslxD9B2zi4UTXhF60s6SWpuDF0Q=
 golang.org/x/crypto v0.0.0-20180904163835-0709b304e793/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
-golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
-golang.org/x/crypto v0.0.0-20200429183012-4b2356b1ed79 h1:IaQbIIB2X/Mp/DKctl6ROxz1KyMlKp4uyvL6+kQ7C88=
-golang.org/x/crypto v0.0.0-20200429183012-4b2356b1ed79/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
-golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9 h1:psW17arqaxU48Z5kZ0CQnkZWQJsqcURM6tKiBApRjXI=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
+golang.org/x/crypto v0.0.0-20200820211705-5c72a883971a/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
+golang.org/x/crypto v0.0.0-20201221181555-eec23a3978ad h1:DN0cp81fZ3njFcrLCytUHRSUkqBjfTo4Tx9RJTWs0EY=
+golang.org/x/crypto v0.0.0-20201221181555-eec23a3978ad/go.mod h1:jdWPYTVW3xRLrWPugEBEK3UY2ZEsg3UU495nc5E+M+I=
 golang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=
 golang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=
-golang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
-golang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
 golang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20181114220301-adae6a3d119a/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20181220203305-927f97764cc3/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
-golang.org/x/net v0.0.0-20190522155817-f3200d17e092 h1:4QSRKanuywn15aTZvI/mIDEgPQpswuFndXpOj3rKEco=
 golang.org/x/net v0.0.0-20190522155817-f3200d17e092/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=
 golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
-golang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
-golang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=
+golang.org/x/net v0.0.0-20200822124328-c89045814202/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=
+golang.org/x/net v0.0.0-20210119194325-5f4716e94777 h1:003p0dJM77cxMSyCPFphvZf/Y5/NXf5fzg6ufd1/Oew=
+golang.org/x/net v0.0.0-20210119194325-5f4716e94777/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=
 golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
 golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
-golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
-golang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20181107165924-66b7b1311ac8/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20181116152217-5ac8a444bdc5/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
+golang.org/x/sys v0.0.0-20190222072716-a9d3bda3a223/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20191120155948-bd437916bb0e h1:N7DeIrjYszNmSW409R3frPPwglRwMkXSBzwVbkOjLLA=
+golang.org/x/sys v0.0.0-20190813064441-fde4db37ae7a/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20191120155948-bd437916bb0e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20210119212857-b64e53b001e4 h1:myAQVi0cGEoqQVR5POX+8RR2mrocKqNN1hmeMqhX27k=
-golang.org/x/sys v0.0.0-20210119212857-b64e53b001e4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/text v0.3.0 h1:g61tztE5qeGQ89tm6NTjjM9VPIm088od1l6aSorWRWg=
+golang.org/x/sys v0.0.0-20200116001909-b77594299b42/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200223170610-d5e6a3e2c0ae/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200323222414-85ca7c5b95cd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200826173525-f9321e4c35a6/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20210124154548-22da62e12c0c h1:VwygUrnw9jn88c4u8GD3rZQbqrP/tgas88tPUbBxQrk=
+golang.org/x/sys v0.0.0-20210124154548-22da62e12c0c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/term v0.0.0-20201117132131-f5c789dd3221/go.mod h1:Nr5EML6q2oocZ2LXRh80K7BxOlk5/8JxuGnuhpl+muw=
+golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1 h1:v+OssWQX+hTHEmOBgwxdZxK4zHq3yOs8F9J7mk0PY8E=
+golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
+golang.org/x/text v0.3.5 h1:i6eZZ+zk0SOf0xgBpEpPD18qWcJda6q1sxt3S0kzyUQ=
+golang.org/x/text v0.3.5/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/time v0.0.0-20190308202827-9d24e82272b4/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
+golang.org/x/time v0.0.0-20201208040808-7e3f01d25324/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
+golang.org/x/time v0.0.0-20210220033141-f8bda1e9f3ba/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
 golang.org/x/tools v0.0.0-20180221164845-07fd8470d635/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
-golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
-golang.org/x/tools v0.0.0-20200522201501-cb1345f3a375 h1:SjQ2+AKWgZLc1xej6WSzL+Dfs5Uyd5xcZH1mGC411IA=
-golang.org/x/tools v0.0.0-20200522201501-cb1345f3a375/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
-golang.org/x/tools v0.1.0 h1:po9/4sTYwZU9lPhi1tOrb4hCv3qrhiQ77LZfGa2OjwY=
-golang.org/x/tools v0.1.0/go.mod h1:xkSsbof2nBLbhDlRMhhhyNLN/zl3eTqcnHD5viDpcZ0=
-golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7 h1:9zdDQZ7Thm29KFXgAX/+yaf3eVbP7djjWp/dXAppNCc=
+golang.org/x/tools v0.0.0-20191125144606-a911d9008d1f/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
-golang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
-golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
+golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=
 golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 google.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=
 google.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=
@@ -217,6 +243,6 @@ gopkg.in/yaml.v2 v2.0.0-20170812160011-eb3733d160e7/go.mod h1:JAlM8MvJe8wmxCU4Bl
 gopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
-gopkg.in/yaml.v2 v2.2.8 h1:obN1ZagJSUGI0Ek/LBmuj4SNLPfIny3KsKFopxRdj10=
-gopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
+gopkg.in/yaml.v2 v2.3.0 h1:clyUAQHOM3G0M3f5vQj7LuJrETvjVot3Z5el9nffUtU=
+gopkg.in/yaml.v2 v2.3.0/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 honnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
