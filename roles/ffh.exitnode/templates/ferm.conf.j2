
@def $DEV_EXIT = eth0;

@def &PRIV_NET($net) = {
      outerface $DEV_EXIT daddr $net REJECT reject-with icmp-host-unreachable;
      outerface $DEV_EXIT saddr $net REJECT reject-with icmp-host-unreachable;
}

@def &PRIV_NET_DEST_ONLY($net) = {
      outerface $DEV_EXIT daddr $net REJECT reject-with icmp-host-unreachable;
}

domain (ip) {
  table nat {
    #chain PREROUTING {
      # Route QUIC UDP packets which would exceed our MTU to the "mtudummy" interface
      # to generate ICMP "too big" messages which trigger PMTU on the other side
    #  interface eth0 proto udp sport 443 mod length length 1299:1500 DNAT to 192.0.0.1;
    #}

    chain POSTROUTING {
      # Alternativly to MASQUERADE use SNAT to <addr>;
      saddr 10.0.0.0/8 outerface eth0 MASQUERADE;
    }
  }
  table filter {
    chain INPUT {
{% for name,node in supernodes.items() %}
      saddr {{ node.ip4 }}/32 proto gre ACCEPT; # {{ name }}
{% endfor %}
    }

    chain FORWARD {

      # We block for daddr only here, as the addresses will be natted
      # in outgoing case anyway. Filtering them here in a useful sense
      # is impossible therefore.
      &PRIV_NET_DEST_ONLY(10.0.0.0/8);

      &PRIV_NET(100.64.0.0/10);
      &PRIV_NET(127.0.0.0/8);
      &PRIV_NET(169.254.0.0/16);
      &PRIV_NET(172.16.0.0/12);
      &PRIV_NET(192.0.2.0/24);
      &PRIV_NET(192.88.99.0/24);
      &PRIV_NET(192.168.0.0/16);
      &PRIV_NET(198.18.0.0/15);
      &PRIV_NET(198.51.100.0/24);
      &PRIV_NET(203.0.113.0/24);
      &PRIV_NET(224.0.0.0/4);
      &PRIV_NET(240.0.0.0/4);

      # https://gluon.readthedocs.io/en/latest/user/faq.html#what-is-a-good-mtu-on-the-mesh-vpn
      # 1394 (fastd mtu) - 32 (batman header) - 20 (ipv4 header) - 20 (tcp header) = 1322
      # as to https://github.com/freifunkh/ansible/pull/95/#issuecomment-7552886421
      # the clamping needs to be even thinner to pass a VXLAN in WireGuard in Batman encapsulated frames
      #   1460 (dslite mtu) - 20 (ipv4 header) - 40 (wireguard) - 40 (ipv6 header)
      #   - 16 (vxlan header) - 14 (ethernet header) - 18 (batman header) - 14 (ethernet header)
      #   - 20 (ipv4 header) - 20 (tcp header)
      #  = 1258
      outerface $DEV_EXIT proto tcp tcp-flags (SYN RST) SYN TCPMSS set-mss 1258;

      outerface eth0 interface eth0 DROP;
      ACCEPT;
    }
  }
}

domain (ip6) {
  table filter {
    chain FORWARD {
      &PRIV_NET(100::/64);
      &PRIV_NET(2001:2::/48);
      &PRIV_NET(2001:10::/28);
      &PRIV_NET(2001:db8::/32);
      &PRIV_NET(2002::/16);
      &PRIV_NET(3ffe::/16);
      &PRIV_NET(fc00::/7);
      &PRIV_NET(fec0::/10);
      &PRIV_NET(ff00::/8);

      # see the explanation above and subtract 20 to account for the 20 bytes bigger IPv6 header
      outerface $DEV_EXIT proto tcp tcp-flags (SYN RST) SYN TCPMSS set-mss 1238;

      outerface eth0 interface eth0 DROP;
      ACCEPT;
    }
  }
}

domain (ip ip6) {
  table filter {
    chain FORWARD {
      interface eth0 outerface mtudummy ACCEPT;
{% for name,node in supernodes.items() %}
      interface eth0 outerface gre-{{ name }} ACCEPT;
      interface gre-{{ name }} outerface eth0 ACCEPT;
{% endfor %}
    }
  }
}

#domain (ip ip6) {
#  table raw {
#    chain PREROUTING {
      # Disable tracking for oversized QUIC UDP packets to allow processing
      # by DNAT even if the connection was initiated using masquerading
#      interface eth0 proto udp sport 443 mod length length 1299:1500 NOTRACK;
#    }
#    chain OUTPUT {
      # Disable tracking for packets that leave on the dummy interface to
      # avoid blackholing of traffic that is not oversized
#      outerface mtudummy NOTRACK;
#    }
#  }
#}

domain (ip ip6) {
  table mangle {
    chain PREROUTING {
      # Add a packet mark to oversized QUIC traffic to let it use routing
      # table 43 so that it is being routed to the dummy interface
      interface eth0 proto udp sport 443 mod length length 1299:1500 MARK set-xmark 0x2b/0xffffffff;
    }
  }
}
