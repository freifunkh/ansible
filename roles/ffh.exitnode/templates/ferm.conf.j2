
@def $DEV_EXIT = {{ exit_device | default('eth0') }};

@def &PRIV_NET($net) = {
      outerface $DEV_EXIT daddr $net REJECT reject-with icmp-host-unreachable;
      outerface $DEV_EXIT saddr $net REJECT reject-with icmp-host-unreachable;
}


@def &PRIV_NET_DEST_ONLY($net) = {
      outerface $DEV_EXIT daddr $net REJECT reject-with icmp-host-unreachable;
}

domain (ip) {
  table nat {
    chain POSTROUTING {
      # Alternativly to MASQUERADE use SNAT to <addr>;
      saddr 10.0.0.0/8 outerface $DEV_EXIT MASQUERADE;
    }
  }
  table filter {
    chain INPUT {
{% for item in supernodes | dict2items %}
      saddr {{ item.value.ip4 }}/32 proto gre ACCEPT; # {{ item.key }}
{% endfor %}
    }

    chain FORWARD {

      # We block for daddr only here, as the addresses will be natted
      # in outgoing case anyway. Filtering them here in a useful sense
      # is impossible therefore.
      &PRIV_NET_DEST_ONLY(10.0.0.0/8);

      &PRIV_NET(100.64.0.0/10);
      &PRIV_NET(127.0.0.0/8);
      &PRIV_NET(169.254.0.0/16);
      &PRIV_NET(172.16.0.0/12);
      &PRIV_NET(192.0.2.0/24);
      &PRIV_NET(192.88.99.0/24);
      &PRIV_NET(192.168.0.0/16);
      &PRIV_NET(198.18.0.0/15);
      &PRIV_NET(198.51.100.0/24);
      &PRIV_NET(203.0.113.0/24);
      &PRIV_NET(224.0.0.0/4);
      &PRIV_NET(240.0.0.0/4);

      # https://gluon.readthedocs.io/en/latest/user/faq.html#what-is-a-good-mtu-on-the-mesh-vpn
      # 1394 (fastd mtu) - 32 (batman header) - 20 (ipv4 header) - 20 (tcp header) = 1322
      # as to https://github.com/freifunkh/ansible/pull/95/#issuecomment-7552886421
      # the clamping needs to be even thinner to pass a VXLAN in WireGuard in Batman encapsulated frames
      #   1460 (dslite mtu) - 20 (ipv4 header) - 40 (wireguard) - 40 (ipv6 header)
      #   - 16 (vxlan header) - 14 (ethernet header) - 18 (batman header) - 14 (ethernet header)
      #   - 20 (ipv4 header) - 20 (tcp header)
      #  = 1258
      outerface $DEV_EXIT proto tcp tcp-flags (SYN RST) SYN TCPMSS set-mss 1258;

      outerface $DEV_EXIT interface $DEV_EXIT DROP;
      ACCEPT;
    }
  }
}

domain (ip6) {
  table filter {
    chain FORWARD {
      &PRIV_NET(100::/64);
      &PRIV_NET(2001:2::/48);
      &PRIV_NET(2001:10::/28);
      &PRIV_NET(2001:db8::/32);
      &PRIV_NET(2002::/16);
      &PRIV_NET(3ffe::/16);
      &PRIV_NET(fc00::/7);
      &PRIV_NET(fec0::/10);
      &PRIV_NET(ff00::/8);

      # see the explanation above and subtract 20 to account for the 20 bytes bigger IPv6 header
      outerface $DEV_EXIT proto tcp tcp-flags (SYN RST) SYN TCPMSS set-mss 1238;

      outerface $DEV_EXIT interface $DEV_EXIT DROP;
      ACCEPT;
    }
  }
}

domain (ip ip6) {
  table filter {
    chain FORWARD {
{% for item in supernodes | dict2items %}
      interface $DEV_EXIT outerface gre-{{ item.key }} ACCEPT;
      interface gre-{{ item.key }} outerface $DEV_EXIT ACCEPT;
{% endfor %}
    }
  }
}
