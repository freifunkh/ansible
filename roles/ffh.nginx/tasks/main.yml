---

- name: Generate firewall config stanza (ferm)
  register: ferm_changed
  template:
    src: ferm.conf.j2
    dest: /etc/ferm/conf.d/50-nginx.conf
  notify: reload ferm

- name: Install https for apt
  apt:
    name: apt-transport-https
    update_cache: yes

- name: Install nginx from nginx repo
  when: nginx_repo is true
  block:
  - name: Add nginx repository key
    apt_key:
      url: "https://nginx.org/keys/nginx_signing.key"
  - name: Add nginx repository
    register: nginxrepositoryadded
    apt_repository:
      repo: "deb https://nginx.org/packages/debian/ {{ansible_distribution_release}} nginx"
  - name: Update apt cache to get nginx packages
    apt: update_cache=yes
    when: nginxrepositoryadded is changed
  - name: Remove old nginx
    apt:
      state: absent
      name: "{{ packages }}"
    vars:
      packages:
      - nginx=1.6.*
      - nginx-common=1.6.*
  - name: Unmask service nginx
    systemd:
      name: nginx
      masked: no

- name: Install nginx
  apt:
    name: nginx

- name: Remove old fastcgi.conf
  file:
    path: /etc/nginx/fastcgi.conf
    state: absent

- name: Remove default site configs
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /etc/nginx/sites-enabled/default
    - /etc/nginx/conf.d/default.conf
  notify: Reload nginx

- name: Install PHP
  apt:
    name: php-fpm
  with_items: "{{ nginx_sites }}"

- name: Create webroot for nginx
  file:
    path: "{{ nginx_webroot }}"
    state: directory
    owner: www-data
    group: www-data
    mode: 0775

- name: Create directories for sites-available & sites-enabled
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
  with_items:
    - "{{ nginx_sites_available_dir }}"
    - "{{ nginx_sites_enabled_dir }}"

- name: Create directory for keys
  file:
    path: "{{ nginx_keys_dir }}"
    state: directory
    mode: 0700

- name: Create nginx config
  template:
    src: 00-nginx.conf.j2
    dest: /etc/nginx/nginx.conf
  notify: Reload nginx

- name: Create site webroots
  file:
    path: "{{ item.root }}"
    state: directory
    owner: www-data
    group: www-data
    mode: 0775
  when: item.root is defined
  with_items: "{{ nginx_sites }}"

- name: Copy pre-defined DH group ffdhe4096
  template:
    src: dhparams-4096.pem.j2
    dest: /etc/nginx/keys/dhparams-4096.pem
  when: item.tls|default(False)
  with_items: "{{ nginx_sites }}"

- name: Check if certs are already generated
  stat:
    path: "{{ nginx_keys_dir }}/{{ item.domain }}.crt"
  register: certsexisting
  when: item.tls|default(False)
  with_items: "{{ nginx_sites }}"

- name: Create directory for getssl
  file:
    path: "{{ nginx_getssl_dir }}"
    state: directory
  when: item.tls|default(False)
  with_items: "{{ nginx_sites }}"

- name: Create directory for getssl (Domain)
  file:
    path: "{{ nginx_getssl_dir }}/{{ item.domain }}"
    state: directory
    mode: 0700
  when: item.tls|default(False)
  with_items: "{{ nginx_sites }}"

- name: Create getssl config
  template:
    src: 07-getssl.cfg.j2
    dest: "{{ nginx_getssl_dir }}/{{ item.domain }}/getssl.cfg"
  when: item.tls|default(False)
  with_items: "{{ nginx_sites }}"

- name: Install dependency for getssl (curl)
  apt:
    name: curl

- name: Download getssl
  get_url:
    url: "https://raw.githubusercontent.com/srvrco/getssl/release2.46/getssl"
    dest: "{{ nginx_getssl_dir }}/getssl"
    mode: 0700
    checksum: "sha256:1d05824bed32b5b1d5bdc546b338abf1ed2a48d0c8c6f903cc15883b2412614d"
  when: item.tls|default(False)
  with_items: "{{ nginx_sites }}"

- name: Create site configs for acme challenge
  template:
    src: 01-nginx-acme-challenge.j2
    dest: "{{ nginx_sites_enabled_dir }}/{{ item['item']['domain'] }}"
  when: item['stat'] is defined and item['stat']['exists'] == False
  with_items: "{{ certsexisting.results }}"
  notify: Reload nginx

- name: Trigger all handlers, because we need it running to get tls
  # there seems no more elegant way for now. The only way would be
  # using a lot of "register:" and "when:" statements
  # (flushing single handlers is not possible yet)
  meta: flush_handlers

- name: Run getssl
  command: "{{ nginx_getssl_dir }}/getssl -w {{ nginx_getssl_dir }} -U {{ item['item']['domain'] }}"
  when: item['stat'] is defined and item['stat']['exists'] == False
  with_items: "{{ certsexisting.results }}"

- name: Check again if certs are now generated
  stat:
    path: "{{ nginx_keys_dir }}/{{ item.domain }}.crt"
  register: certsexisting
  when: item.tls|default(False)
  with_items: "{{ nginx_sites }}"

- name: Update getssl configs (CHECK_REMOTE)
  # When the certificates are updated, we want to restart nginx to reload
  # the certificates. But in the first run, this won't start tls, since
  # nginx is not configured to serve via tls yet.
  #
  # Furthermore getssl has a mechanism called CHECK_REMOTE, where a remote
  # server checks, whether we are serving the correct certificate. This is
  # generally desirable, but on the first run, we disable this, because
  # getssl would fail otherwise.
  #
  # In this task we enable it back again.
  template:
    src: 07-getssl.cfg.j2
    dest: "{{ nginx_getssl_dir }}/{{ item.domain }}/getssl.cfg"
  when: item.tls|default(False)
  with_items: "{{ nginx_sites }}"

- name: Create site configs
  template:
    src: 02-nginx-site.j2
    dest: "{{ nginx_sites_available_dir }}/{{ item.domain }}"
  with_items: "{{ nginx_sites }}"
  when: item.untouchable is not defined or item.untouchable != True
  notify: Reload nginx

- name: Enable site configs
  file:
    src: "{{ nginx_sites_available_dir }}/{{ item.domain }}"
    dest: "{{ nginx_sites_enabled_dir }}/{{ item.domain }}"
    state: link
    force: yes
  when: item.disabled is not defined or item.disabled == False
  with_items: "{{ nginx_sites }}"
  notify: Reload nginx

- name: Remove disabled site configs
  file:
    path: "{{ nginx_sites_enabled_dir }}/{{ item.domain }}"
    state: absent
  when: item.disabled|default(False)
  with_items: "{{ nginx_sites }}"
  notify: Reload nginx

- name: Add cron job for getssl
  template:
    src: 08-getssl.cron.j2
    dest: /etc/cron.daily/getssl
    mode: 0755
  when: item.tls|default(False)
  with_items: "{{ nginx_sites }}"
