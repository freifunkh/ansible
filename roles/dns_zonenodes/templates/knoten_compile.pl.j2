#!/usr/bin/perl

use strict;
use warnings;
use LWP::UserAgent;
use JSON;

## CONFIGURATION ##
###################

my $url         = "http://hannover.freifunk.net:8079/nodes.json";

## END OF CONFIGURATION ##
##########################

sub normalize_nodename {
    my $data = $_[0] || "";

    $data = lc( $data );        # lower-case
    $data =~ s/[^a-z0-9\-]/-/g; # only alphanumeric and dashes
    $data =~ s/[\-]+/-/g;       # no subsequent dashes
    $data =~ s/^[\-]//g;        # no leading dashes
    
    return $data;
}
 
my $ua = LWP::UserAgent->new;
$ua->timeout(10);

print '$TTL 4h'."\n";
print '@           IN  SOA     ns1.ffh.    zonemaster.ffh.zone. ('."\n";
print '                ' . time() . '    ; serial'."\n";
print '                4h      ; refresh (4 hours)'."\n";
print '                1h      ; retry (4 hours)'."\n";
print '                2w      ; expire (2 weeks)'."\n";
print '                1h      ; minimum (1 hour)'."\n";
print '                )'."\n";
print ''."\n";

my $domain = $ARGV[0];

my $response = $ua->get( $url );
if ($response->is_success) {

    my @output;
   
    my $json = $response->decoded_content();
    my $data = from_json( $json, { utf8  => 1 } );

    # Get hostname and IPv6 address from nodes.json
    # normalize hostname
    foreach my $node_id ( keys %{ $data->{nodes} } ) {
        my $ip;
        my $names;
        foreach my $node_ip ( @{ $data->{nodes}->{$node_id}->{nodeinfo}->{network}->{addresses} } ) {
            next if $node_ip !~ m/^fdca/;
            $ip = $node_ip; 
        }
        next unless $ip;
        my $hostname = normalize_nodename( $data->{nodes}->{$node_id}->{nodeinfo}->{hostname} );
        
        if ($hostname ne "")
        {
            push( @output, "$hostname.$domain. IN AAAA $ip\n" );
        }
    }

    # Output a sorted list, so that git is not polluted with unnecessary changes
    foreach my $line ( sort( @output ) ) {
        print $line;
    }
}

1;
