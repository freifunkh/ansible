---

- name: Add backports repository
  apt_repository:
    repo: "deb http://deb.debian.org/debian {{ ansible_distribution_release }}-backports main"
    state: "present"
    update_cache: "yes"
    filename: "backports"

- name: Install systemd from backports
  apt:
    name: "systemd"
    state: "latest"
    default_release: "{{ ansible_distribution_release }}-backports"

- name: "sysctl: net.ipv6.conf.all.disable_ipv6 to 0"
  sysctl:
    name: net.ipv6.conf.all.disable_ipv6
    value: "0"
    sysctl_file: /etc/sysctl.d/10-ipv6.conf
    reload: yes

- name: "sysctl: net.ipv6.conf.default.disable_ipv6 to 0"
  sysctl:
    name: net.ipv6.conf.default.disable_ipv6
    value: "0"
    sysctl_file: /etc/sysctl.d/10-ipv6.conf
    reload: yes

- name: Obtain systemd version
  shell: "systemd --version | head -n 1 | cut -d ' ' -f 2"
  register: systemd_version
  check_mode: no
  changed_when: false

- name: Print systemd version
  debug:
    msg: 'Systemd version is {{ systemd_version.stdout }}'

# Disabling ManageForeignRoutes is only possible in systemd 247 and above.
- name: Ensure systemd version >= 247 for ManageForeignRoutes=no feature
  command: /bin/true
  when: not networkd_manage_foreign_routes
  failed_when: (systemd_version.stdout | int) < 247
  check_mode: no
  changed_when: false

- name: Install /etc/systemd/networkd.conf
  notify: Restart networkd
  template:
    dest: /etc/systemd/networkd.conf
    src: networkd.conf.j2

- name: Install systemd-resolved
  apt:
    name: systemd-resolved
    state: present
  when: (systemd_version.stdout | int) > 251

- name: Enable systemd-resolved
  service: name=systemd-resolved enabled=yes state=started
  when: (systemd_version.stdout | int) > 251

- name: Enable systemd-networkd
  service: name=systemd-networkd enabled=yes state=started
  # networkd does not remove any existing network configuration,
  # so this should be safe.

- name: Install iface configs
  notify: Restart networkd
  template:
    src: 1x-iface.network.j2
    dest: /etc/systemd/network/10-{{ item.1.iface }}.network
  with_indexed_items: "{{ networkd_configures }}"

- name: Install VLAN devices
  notify: Restart networkd
  template: src=vlan.netdev.j2 dest=/etc/systemd/network/vlan{{ item.1.id }}.netdev
  with_indexed_items: "{{ networkd_vlans | default( [] ) }}"

- name: Install gre devices
  notify: Restart networkd
  template: src=2x-gre.netdev.j2 dest=/etc/systemd/network/2{{ item.0 }}-gre-{{ item.1.name }}.netdev
  with_indexed_items: "{{ networkd_gre_tunnels }}"

- name: Install tap devices
  notify: Restart networkd
  template: src=2x-tap.netdev.j2 dest=/etc/systemd/network/2{{ item.0 }}-tap-{{ item.1 }}.netdev
  with_indexed_items: "{{ networkd_tap_devices }}"

- name: Enable dns resolving with systemd-resolved
  register: enableresolved
  file: src=/run/systemd/resolve/resolv.conf dest=/etc/resolv.conf state=link force=yes

- name: Directly restart networkd
  service: name=systemd-networkd state=restarted
  when: enableresolved is changed

- name: Disable debian networking
  service: name=networking enabled=no
  # Do not stop the debian networking scripts immediately, since the scripts
  # would remove their already applied configuration. networkd does not perceive
  # the removed configuration and would not apply it's own. This would cause connection
  # loss. So we wait until the next reboot, to let networkd do the whole networking.
