---

- name: Install systemd
  ansible.builtin.apt:
    pkg:
    - "systemd"
    - "systemd-resolved"

- name: "sysctl: net.ipv6.conf.all.disable_ipv6 to 0"
  sysctl:
    name: net.ipv6.conf.all.disable_ipv6
    value: "0"
    sysctl_file: /etc/sysctl.d/10-ipv6.conf
    reload: yes

- name: "sysctl: net.ipv6.conf.default.disable_ipv6 to 0"
  sysctl:
    name: net.ipv6.conf.default.disable_ipv6
    value: "0"
    sysctl_file: /etc/sysctl.d/10-ipv6.conf
    reload: yes

# ManageForeignTables defaults to yes
- name: Set ManageForeignTables in networkd.conf
  notify: Restart networkd
  community.general.ini_file:
    path: "/etc/systemd/networkd.conf"
    section: "Network"
    option: "ManageForeignRoutes"
    value: "{{ networkd_manage_foreign_routes }}"
    no_extra_spaces: true
  when: "not networkd_manage_foreign_routes"

- name: Set named routing tables in networkd.conf
  notify: Restart networkd
  community.general.ini_file:
    path: "/etc/systemd/networkd.conf"
    section: "Network"
    option: "RouteTable"
    value: "{{ networkd_rt_tables.keys() | zip(networkd_rt_tables.values()) | map('join', ':') | join(' ') }}"
    no_extra_spaces: true
  when: networkd_rt_tables is defined

- name: Enable systemd-resolved
  service: name=systemd-resolved enabled=yes state=started

- name: Enable systemd-networkd
  service: name=systemd-networkd enabled=yes state=started
  # networkd does not remove any existing network configuration,
  # so this should be safe.

- name: Install iface configs
  notify: Restart networkd
  template:
    src: 1x-iface.network.j2
    dest: /etc/systemd/network/10-{{ item.1.iface }}.network
  with_indexed_items: "{{ networkd_configures }}"

- name: Install VLAN devices
  notify: Restart networkd
  template: src=vlan.netdev.j2 dest=/etc/systemd/network/vlan{{ item.1.id }}.netdev
  with_indexed_items: "{{ networkd_vlans | default( [] ) }}"

- name: Install gre devices
  notify: Restart networkd
  template: src=2x-gre.netdev.j2 dest=/etc/systemd/network/2{{ item.0 }}-gre-{{ item.1.name }}.netdev
  with_indexed_items: "{{ networkd_gre_tunnels }}"

- name: Install tap devices
  notify: Restart networkd
  template: src=2x-tap.netdev.j2 dest=/etc/systemd/network/2{{ item.0 }}-tap-{{ item.1 }}.netdev
  with_indexed_items: "{{ networkd_tap_devices }}"

- name: Install bond devices
  notify: Restart networkd
  template: src=3x-bond.netdev.j2 dest=/etc/systemd/network/3{{ item.0 }}-{{ item.1.name }}.netdev
  with_indexed_items: "{{ networkd_bonds | default( [] ) }}"

- name: Enable dns resolving with systemd-resolved
  register: enableresolved
  file: src=/run/systemd/resolve/resolv.conf dest=/etc/resolv.conf state=link force=yes

- name: Directly restart networkd
  service: name=systemd-networkd state=restarted
  when: enableresolved is changed

- name: Disable debian networking
  service: name=networking enabled=no
  # Do not stop the debian networking scripts immediately, since the scripts
  # would remove their already applied configuration. networkd does not perceive
  # the removed configuration and would not apply it's own. This would cause connection
  # loss. So we wait until the next reboot, to let networkd do the whole networking.
